<?php
/**
 * malCure WP Malware Scanner & Firewall
 *
 * @package     malCure WP Malware Scanner & Firewall
 * @author      malCure
 * @copyright   2019 malcure.com
 * @license     MIT
 *
 * @wordpress-plugin
 * Plugin Name: malCure WP Malware Scanner & Firewall
 * Description: Ultra-precision, comphrensive malware scanner and firewall to protect your site and find viruses, infections & other security threats & vulnerabilities. Detects over 50,000+ security threats & vulnerabilities. Do not forget to report bugs and share your reviews.
 * Version:     8.4
 * Author:      malCure
 * Author URI:  https://malcure.com
 * Text Domain: wp-malware-removal
 * License:     MIT
 * License URI: https://opensource.org/licenses/MIT
 * Plugin URI:  https://malcure.com/?p=116
 */

/*
███╗   ███╗ █████╗ ██╗      ██████╗██╗   ██╗██████╗ ███████╗    ███╗   ███╗ █████╗ ██╗     ██╗    ██╗ █████╗ ██████╗ ███████╗    ███████╗ ██████╗ █████╗ ███╗   ██╗███╗   ██╗███████╗██████╗
████╗ ████║██╔══██╗██║     ██╔════╝██║   ██║██╔══██╗██╔════╝    ████╗ ████║██╔══██╗██║     ██║    ██║██╔══██╗██╔══██╗██╔════╝    ██╔════╝██╔════╝██╔══██╗████╗  ██║████╗  ██║██╔════╝██╔══██╗
██╔████╔██║███████║██║     ██║     ██║   ██║██████╔╝█████╗      ██╔████╔██║███████║██║     ██║ █╗ ██║███████║██████╔╝█████╗      ███████╗██║     ███████║██╔██╗ ██║██╔██╗ ██║█████╗  ██████╔╝
██║╚██╔╝██║██╔══██║██║     ██║     ██║   ██║██╔══██╗██╔══╝      ██║╚██╔╝██║██╔══██║██║     ██║███╗██║██╔══██║██╔══██╗██╔══╝      ╚════██║██║     ██╔══██║██║╚██╗██║██║╚██╗██║██╔══╝  ██╔══██╗
██║ ╚═╝ ██║██║  ██║███████╗╚██████╗╚██████╔╝██║  ██║███████╗    ██║ ╚═╝ ██║██║  ██║███████╗╚███╔███╔╝██║  ██║██║  ██║███████╗    ███████║╚██████╗██║  ██║██║ ╚████║██║ ╚████║███████╗██║  ██║
╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝    ╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝ ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝    ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝

		  ██████╗ ██╗   ██╗    ███████╗██╗  ██╗██╗██╗   ██╗
		  ██╔══██╗╚██╗ ██╔╝    ██╔════╝██║  ██║██║██║   ██║
█████╗    ██████╔╝ ╚████╔╝     ███████╗███████║██║██║   ██║
╚════╝    ██╔══██╗  ╚██╔╝      ╚════██║██╔══██║██║╚██╗ ██╔╝
		  ██████╔╝   ██║       ███████║██║  ██║██║ ╚████╔╝
		  ╚═════╝    ╚═╝       ╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝

*/

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * TODO: fetch_file_contents function is called by wpmr_inspect_file and wpmr_clean_file and both use wp_send_json. This makes the function non-reusable for other purposes.
 * TODO: Skipped / Unreadable status needs to be content. Instead of skipped, use exact reason.
 */

define( 'WPMR_PLUGIN_DIR_URL', trailingslashit( plugin_dir_url( __FILE__ ) ) );
define( 'WPMR_SERVER', 'https://wp-malware-removal.com/' );
define( 'WPMR_PLUGIN', __FILE__ );
define( 'WPMR_PLUGIN_DIR', trailingslashit( __DIR__ ) );
if ( ! defined( 'MALCURE_API' ) ) {
	define( 'MALCURE_API', 'https://malcure.com' );
}
if ( file_exists( WPMR_PLUGIN_DIR . 'inc/pro.php' ) ) {
	include_once WPMR_PLUGIN_DIR . 'inc/pro.php';
}
if ( file_exists( WPMR_PLUGIN_DIR . 'inc/utils.php' ) ) {
	include_once WPMR_PLUGIN_DIR . 'inc/utils.php';
}
if ( file_exists( WPMR_PLUGIN_DIR . 'inc/bg.php' ) ) {
	include_once WPMR_PLUGIN_DIR . 'inc/bg.php';
}

/**
 * To do:
 * Scan file on demand
 */
final class WPMR_Init {

	private $definitions;
	private $flag;
	public $dir;
	public $url;
	private $mem         = 256;
	private $maxsize     = 2000000;
	private $cap         = 'activate_plugins';

	static function get_instance() {
		static $instance = null;
		if ( is_null( $instance ) ) {
			$instance = new self();
			$instance->init();
		}

		return $instance;
	}

	function init() {
		@$this->req_essential_memory();
		$this->dir = trailingslashit( plugin_dir_path( __FILE__ ) );
		$this->url = trailingslashit( plugin_dir_url( __FILE__ ) );

		register_deactivation_hook( WPMR_PLUGIN, array( $this, 'deactivate' ) );

		if ( ! wp_next_scheduled( 'wpmr_daily' ) ) {
			wp_schedule_event( time(), 'daily', 'wpmr_daily' );
		}
		if ( ! wp_next_scheduled( 'wpmr_hourly' ) ) {
			wp_schedule_event( time(), 'hourly', 'wpmr_hourly' );
		}

		add_action( 'wpmr_daily', array( $this, 'check_definitions' ) );
		add_action( 'wpmr_hourly', array( $this, 'automate_routines' ) );

		// add_action( 'admin_init', array( $this, 'upgrade' ) );
		add_action( 'upgrader_process_complete', array( $this, 'delete_core_checksums' ), 9999, 2 );
		add_action( 'init', array( $this, 'set_plugin_data' ) );
		add_action( 'admin_init', array( $this, 'save_gsc_profile' ) );
		add_action( 'admin_init', array( $this, 'register_settings' ) );
		add_action( 'admin_notices', array( $this, 'admin_notice' ) );
		add_filter( 'plugin_action_links_' . plugin_basename( WPMR_PLUGIN ), array( $this, 'plugin_action_links' ) );
		add_filter( 'plugin_row_meta', array( $this, 'plugin_meta_links' ), 10, 2 ); // Add important links to plugins list (right-side)
		add_action( 'admin_enqueue_scripts', array( $this, 'plugin_styles' ) );
		add_action( 'admin_enqueue_scripts', array( $this, 'malcure_scripts' ) );
		// add_action( 'admin_menu', array( $this, 'firstrun_menu' ), 9999 );
		add_action( 'admin_menu', array( $this, 'settings_menu' ) );
		add_action( 'wp_ajax_wpmr_init_scan', array( $this, 'wpmr_init_scan' ) );

		add_action( 'wp_ajax_wpmr_scan_files', array( $this, 'wpmr_scan_files' ) );
		add_action( 'wp_ajax_wpmr_clean_file', array( $this, 'wpmr_clean_file' ) );
		add_action( 'wp_ajax_wpmr_delete_file', array( $this, 'wpmr_delete_file' ) );
		add_action( 'wp_ajax_wpmr_whitelist_file', array( $this, 'wpmr_whitelist_file' ) );
		add_action( 'wp_ajax_wpmr_unwhitelist_file', array( $this, 'wpmr_unwhitelist_file' ) );

		add_action( 'wp_ajax_malcure_scan_init', array( $this, 'scan_init' ) );
		add_action( 'wp_ajax_nopriv_malcure_scan_init', '__return_false' );

		add_action( 'wp_ajax_wpmr_inspect_file', array( $this, 'wpmr_inspect_file' ) );
		add_action( 'wp_ajax_wpmr_clear_infection_stats', array( $this, 'wpmr_clear_infection_stats' ) );
		add_action( 'wp_ajax_wpmr_update_sigs', array( $this, 'update_definitions' ) );
		add_action( 'wp_ajax_wpmr_reset', array( $this, 'reset' ) );
		add_action( 'wp_ajax_nopriv_wpmr_reset', '__return_false' );
		add_action( 'wp_ajax_wpmr_web_register', array( $this, 'wpmr_web_register' ) );
		add_action( 'wp_ajax_nopriv_wpmr_inspect_file', '__return_false' );
		add_action( 'wp_ajax_nopriv_wpmr_clear_infection_stats', '__return_false' );
		add_action( 'wp_ajax_nopriv_wpmr_init_scan', array( $this, 'wpmr_init_scan_cli' ) );

		add_action( 'wp_ajax_nopriv_wpmr_clean_file', '__return_false' );
		add_action( 'wp_ajax_nopriv_wpmr_delete_file', '__return_false' );
		add_action( 'wp_ajax_nopriv_wpmr_whitelist_file', '__return_false' );
		add_action( 'wp_ajax_nopriv_wpmr_unwhitelist_file', '__return_false' );
		add_action( 'wp_ajax_nopriv_wpmr_scan_files', array( $this, 'wpmr_scan_files_cli' ) );
		add_action( 'wp_ajax_nopriv_wpmr_check_files', '__return_false' );
		add_action( 'wp_ajax_nopriv_wpmr_update_sigs', '__return_false' );
		add_action( 'wp_ajax_nopriv_wpmr_web_register', '__return_false' );
		add_action( 'admin_footer', array( $this, 'scripts' ) );

		add_action( 'load-toplevel_page_wpmr', array( $this, 'load_meta_boxes' ) );
		add_action( 'load-toplevel_page_wpmr', array( $this, 'add_meta_boxes' ) );

		add_action( 'load-malcure_page_malcure_scanner', array( $this, 'load_meta_boxes' ) );
		add_action( 'load-malcure_page_malcure_scanner', array( $this, 'add_meta_boxes' ) );

		add_action( 'load-toplevel_page_wpmr', array( $this, 'add_admin_scripts' ) );

		add_action( 'admin_head', array( $this, 'admin_style' ) );
		add_action( 'in_plugin_update_message-' . basename( WPMR_PLUGIN_DIR ) . '/' . basename( WPMR_PLUGIN ), array( $this, 'plugin_update_message' ), 10, 2 );
		add_action( 'plugins_loaded', array( $this, 'waf' ), -1 );
		add_action( 'wp_dashboard_setup', array( $this, 'dashboard_widget' ), 1 );
		// add_filter( 'get_user_option_metaboxhidden_dashboard', '__return_false' ); // Should users be able to hide security alerts?
		add_filter( 'postbox_classes_toplevel_page_wpmr_wpmr_updates_box', array( $this, 'prompt_register' ) );

		add_filter( 'admin_body_class', array( $this, 'admin_body_classes' ) );

		add_filter( 'wpmr_checksums', array( $this, 'wpmr_checksum_cache' ) );
		add_filter( 'wpmr_checksums', array( $this, 'whitelist' ), 9999 );

		add_action( 'wpmr_diagnostics_row', array( $this, 'malcure_user_sessions' ) );
		add_action( 'wp_ajax_malcure_destroy_sessions', array( $this, 'destroy_sessions' ) );
		add_action( 'wp_ajax_nopriv_malcure_destroy_sessions', '__return_false' );

	}

	function automate_routines() {
		if ( ! ( defined( 'DOING_CRON' ) && DOING_CRON ) || ! $this->is_advanced_edition() ) {
			return;
		}
		$check   = $this->check_definitions();
		$updates = $this->definition_updates_available();
		if ( $updates ) {
			$update = $this->update_definitions_cli( true );
		}
	}

	function malcure_user_sessions(){ ?>
		<tr><th>Logged-In Users:</th><td>
			<?php
			submit_button( 'Logout All Users', 'primary', 'malcure_destroy_sessions' );
			$users = $this->get_users_loggedin();
			foreach ( $users as $user ) {
				echo '<table class="user_details" id="user_details_"' . $user->ID . '>';
				echo '<tr><th class="user_details_id">User ID</th><td>' . $user->ID . '</td></tr>';
				echo '<tr><th class="user_details_roles">User Roles</th><td>' . implode( ',', $user->roles ) . '</td></tr>';
				echo '<tr><th class="user_details_user_login">User Login</th><td>' . $user->user_login . '</td></tr>';
				echo '<tr><th class="user_details_user_email">User Email</th><td>' . $user->user_email . '</td></tr>';
				echo '<tr><th class="user_details_display_name">Display Name</th><td>' . $user->display_name . '</td></tr>';
				echo '<tr><th class="user_details_user_registered">Date Registered</th><td>' . $user->user_registered . '</td></tr>';
				$s_details = '';
				$s_details = get_user_meta( $user->ID, 'session_tokens', true );
				echo '<tr><th  class="user_details_session_ip">Sessions</th><td>';
				foreach ( $s_details as $s_detail ) {
					echo '<table class="user_details_session">';
					echo '<tr><th  class="user_details_session_ip">IP Address</th><td>' . $s_detail['ip'] . '</td></tr>';
					echo '<tr><th  class="user_details_session_ua">User-Agent</th><td>' . $s_detail['ua'] . '</td></tr>';
					echo '<tr><th  class="user_details_session_login">Login Date</th><td>' . date( 'Y M d', $s_detail['login'] ) . '</td></tr>';
					echo '<tr><th  class="user_details_session_expiration">Login Expiration Date</th><td>' . date( 'Y M d', $s_detail['expiration'] ) . '</td></tr>';
					echo '</table>';
				}
				echo '</td></tr>';
				echo '</table>';
			}
			?>
			</td></tr>
			<script type="text/javascript">
			jQuery(document).ready(function($){
				$("#malcure_destroy_sessions").click(function(){
					malcure_destroy_sessions = {
						malcure_destroy_sessions_nonce: '<?php echo wp_create_nonce( 'malcure_destroy_sessions' ); ?>',
						action: "malcure_destroy_sessions",
						cachebust: Date.now(),
						user: {
							id: <?php echo get_current_user_id(); ?>
						}
					};
					$("#malcure_destroy_sessions").fadeTo("slow",.1);
					$.ajax({
						url: ajaxurl,
						method: 'POST',
						data: malcure_destroy_sessions,
						complete: function(jqXHR, textStatus) {
							$("#malcure_destroy_sessions").fadeTo("slow",1);
						},
						success: function(response) {
							if ((typeof response) != 'object') {
								response = JSON.parse( response );
							}
							if (response.hasOwnProperty('success') ) { // data is proper json && success == true
								if( response.success ) {
									if(confirm('All users have been logged out (except you). Reload the page now?')) {
										location.reload();
									}
								}
								else {
									alert(response.data);
								}
							} else {
								alert('Failed to logout other users.');
							}
						}
					});
				})
			});
			</script>
			<?php
	}

	function destroy_sessions() {
		if ( ! $this->is_advanced_edition() ) {
			wp_send_json_error( 'Advanced features are only available in malCure Advanced Edition.' );
		}

		check_ajax_referer( 'malcure_destroy_sessions', 'malcure_destroy_sessions_nonce' );
		$users = $this->get_users_loggedin();
		$id    = $_REQUEST['user']['id'];
		foreach ( $users as $user ) {
			if ( $user->ID != $id ) {
				$sessions = WP_Session_Tokens::get_instance( $user->ID );
				$sessions->destroy_all();
			}
		}
		wp_send_json_success();
	}

	function get_users_loggedin() {
		return get_users(
			array(
				'meta_key'     => 'session_tokens',
				'meta_compare' => 'EXISTS',
			)
		);
	}

	function admin_body_classes( $classes ) {
		$screen = get_current_screen();
		if ( preg_match( '/_page.*wpmr/', $screen->id ) ) { // for some reason, it changes the slug from "toplevel_page_wpmr" to "toplevel-1_page_wpmr"

			$classes .= ' malcure ';

			if ( $this->is_advanced_edition() ) {
				$classes .= ' malcure_pro ';
			}
		}
		return $classes;
	}

	function prompt_register( $classes ) {
		if ( ! $this->is_registered() ) {
			array_push( $classes, 'prompt_register' );
		}
		return $classes;
	}

	private function __construct() {
	}

	function dashboard_widget() {
		if ( ! current_user_can( $this->cap ) ) {
			return;
		}
		add_meta_box( 'malcure', 'Malware Status', array( $this, 'malcure_dashboard_widget' ), 'dashboard', 'normal', 'high' );
	}

	function render_branding() {
		echo '<img src="' . $this->url . 'assets/logo-light-trans.svg" />';
	}

	function malcure_dashboard_widget() {
		$attacks = (int) $this->get_setting( 'attacks' );
		if ( ! empty( $attacks ) ) {
			echo '<p><span class="brandname">malCure</span> has prevented ' . $attacks . ' attacks till date.</p>';
		}
		$infected = $this->get_setting( 'infected' );
		$this->render_branding();
		if ( $infected ) {
			?>
			<p class="infected"><?php _e( '<strong>Your Website Is Infected with Malware. <a href="' . get_admin_url( null, 'admin.php?page=wpmr' ) . '">Kindly clean-up your website and fix this issue at the earliest &rarr;</a></strong>', 'wp-malware-removal' ); ?></p>
			<p><a href="https://malcure.com/?p=107&utm_source=adminnotice&utm_medium=web&utm_campaign=wpmr" target="_blank" class="button-primary" style="background: #d22d48; border: 1px solid #d22d4888;font-weight: 600;" >Request Malware Cleanup &rarr;</a></p>
			<?php
		} else {
			?>
			<p><?php _e( '<strong>No infections detected so far. <a href="' . get_admin_url( null, 'admin.php?page=wpmr' ) . '">Kindly scan your website to be sure &rarr;</a></strong>', 'wp-malware-removal' ); ?></p>
			<?php
		}
	}

	function activate() {
		if ( ! wp_next_scheduled( 'wpmr_daily' ) ) {
			wp_schedule_event( time(), 'daily', 'wpmr_daily' );
		}
		if ( ! wp_next_scheduled( 'wpmr_hourly' ) ) {
			wp_schedule_event( time(), 'hourly', 'wpmr_hourly' );
		}
	}

	function deactivate() {
		wp_clear_scheduled_hook( 'wpmr_daily' );
		wp_clear_scheduled_hook( 'wpmr_hourly' );
		@$this->deactivate_pro( true );
	}

	function upgrade() {
		$reg = get_option( 'WPMR_reg' );
		if ( $reg ) {
			if ( $this->update_setting( 'user', $reg ) ) {
				delete_option( 'WPMR_reg' );
			}
		}

		if ( ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) || ( defined( 'DOING_AJAX' ) && DOING_AJAX ) ) {
			return;
		}

		$this->set_plugin_data();
		$old_version = $this->get_setting( 'version' );
		$new_version = $this->plugin_data['Version'];

		if ( ! $old_version || version_compare( $old_version, $new_version ) ) { // show the first run dashboard before attempting to upgrade
			if ( empty( $old_version ) ) {
				$this->firstrun_redirect();
				exit;
			} else {
				$this->firstrun_redirect( $old_version );
				exit;
			}
		}
	}

	function firstrun_menu() {
		$dashboard = add_dashboard_page( 'malCure', 'malCure', $this->cap, 'malcure-firstrun', array( $this, 'malcure_dashboard' ) );
		add_action( 'admin_print_styles-' . $dashboard, array( $this, 'admin_dashboard_css' ) );
	}

	function admin_dashboard_css() {
		wp_enqueue_style( 'malcure-dashboard', WPMR_PLUGIN_DIR_URL . 'assets/admin-styles.css', array(), filemtime( WPMR_PLUGIN_DIR . 'assets/admin-styles.css' ) );
	}

	function malcure_dashboard() {
		$this->set_plugin_data();
		$new_version = $this->plugin_data['Version'];
		if ( isset( $_REQUEST['upgrade'] ) ) {
			$process = 'updating';
		} else {
			$process = 'installing';
		}
		?>
				
		<div class="wrap mc_about_wrap full-width-layout">
			<h1 style="line-height: 0;height: 0;padding: 0;"></h1>
			<div class="container_wrap">
				<h1 class="main_heading">Thank you for <?php echo $process . ' <span class="brandname">malCure</span>' . str_ireplace( 'malcure', '', htmlentities( $this->plugin_data['Name'] ) ) . ' ' . $new_version; ?>!</h1>
				<p>This update comes with an upgraded firewall which focuses on preemptive security.</p>
				<p>Also now you have the ability to reset plugin settings when you want to start fresh.</p>
				<h1 class="todos">Do you know&hellip;?</h1>
				
				<div class="has-2-columns">
					<div class="column">
						<p><span class="brandname">malCure</span> is the #1 plugin for cleaning up hacked websites.</p>
						<p><span class="brandname">malCure</span> detects more infections than all other security plugins put together.</p>
						<p><span class="brandname">malCure</span> as ultra-high-precision results and very rare false-positives.</p>
						<p><span class="brandname">malCure</span> Advanced Edition gives you the power of WP CLI to fix broken sites and sites with hosting disabled.</p>
						<p><a class="cta_btn" target="_blank" href="https://malcure.com/?p=116&utm_source=firstrun&utm_medium=web&utm_campaign=wpmr">Get malCure Advanced Edition&nbsp;&rarr;</a></p>
					</div>
					<div class="column">
						<h3>Support is only a click away. And we work fast!</h3>
						<div class="service_testimonial">
							<figure>
							<blockquote><p>Thanks again for the extremely fast service. I don’t think it took more than 1 hour from the moment I payed for the malware removal service to you guys getting the job done. Very happy I found your service.</p></blockquote><figcaption><img class="round_img" src="https://malcure.com/wp-content/uploads/2019/08/xphilip-alex.png.pagespeed.ic.9-l7LnEfme.webp" alt="Philip Alex - WordPress Malware Removal Service">Philip Alex<br>
							<cite>Website Owner, Masini de Spalat ieftine</cite><br>
							<span class="rating">⭐⭐⭐⭐⭐</span></figcaption></figure>
						</div>
					</div>
				</div>
				<h1 class="premium">Share some love!</h1>
				<h2><span class="brandname">malCure</span> is Premium Security for Free!</h2>
				<div class="has-2-columns love">
					<div class="column aligncenter">
						<p>Support Development</p>
						<p><a class="cta_btn" target="_blank" href="https://www.converticacommerce.com?item_name=Donation%20for%20malCure%20Malware%20Scanner&cmd=_xclick&currency_code=USD&business=shivanand@converticacommerce.com">Donate&nbsp;&rarr;</a></p>
					</div>
					<div class="column aligncenter">
						<p>Or take a moment and&hellip;</p>
						<p><a class="cta_btn" target="_blank" href="https://wordpress.org/support/plugin/wp-malware-removal/reviews/#new-post"><span class="rating">⭐⭐⭐⭐⭐</span> Rate this plugin&nbsp;&rarr;</a></p>
					</div>
				</div>
			</div>
		</div>
		<?php
	}

	function firstrun_redirect( $upgrade = false ) {
		$this->set_plugin_data();
		$new_version = $this->plugin_data['Version'];
		if ( $upgrade ) {
			wp_safe_redirect(
				add_query_arg(
					array(
						'page'    => 'malcure-firstrun',
						'upgrade' => $upgrade,
					),
					admin_url( 'index.php' )
				)
			);
			$this->update_setting( 'version', $new_version );
			exit;
		} else {
			wp_safe_redirect(
				add_query_arg(
					array( 'page' => 'malcure-firstrun' ),
					admin_url( 'index.php' )
				)
			);
			$this->update_setting( 'version', $new_version );
			exit;
		}
	}

	function definition_updates_available() {
		$current = $this->get_definition_version();
		$new     = $this->get_setting( 'update-version' );

		if ( $current != $new ) {
			return array(
				'new'     => $new,
				'current' => $current,
			);
		}
	}

	function wpmr_clear_infection_stats() {
		check_ajax_referer( 'wpmr_clear_infection_stats', 'wpmr_clear_infection_stats_nonce' );
		$this->delete_setting( 'infected' );
		wp_send_json( $_REQUEST );
	}

	function is_json_success( $data ) {
		return ( ! empty( $data['success'] ) );
	}

	function req_essential_memory() {
		if ( function_exists( 'memory_get_usage' ) && ( (int) @ini_get( 'memory_limit' ) < 128 ) ) { // cast into (int) because ini_get returns string with 128M/G etc.
			@ini_set( 'memory_limit', 128 . 'M' ); // need at least 128M for sane WP Usage
		}
	}

	function raise_limits_conditionally() {
		// @set_time_limit( 60 );
		// @ini_set( 'max_execution_time', 60 );
		// @ini_set( 'pcre.jit', false );
		// @ini_set( 'max_input_time', 30000 );
		// @ini_set( 'memory_limit', '2024M' );
		if ( function_exists( 'memory_get_usage' ) && ( (int) @ini_get( 'memory_limit' ) < $this->mem ) ) { // cast into (int) because ini_get returns string with 128M/G etc.
			@ini_set( 'memory_limit', $this->mem . 'M' );
		}
	}

	function admin_notice() {
		if ( ! current_user_can( $this->cap ) ) {
			return;
		}
		$screen = get_current_screen();
		if ( $this->get_setting( 'infected' ) ) {
			?>
			<div class="notice notice-error is-dismissible">
			<p><?php _e( '<strong>Your Website Is Infected with Malware.</strong> <a href="' . get_admin_url( null, 'admin.php?page=wpmr' ) . '">Please scan again and clean-up your website to fix this issue at the earliest &rarr;</a> <em>This message will self-resolve once the scan comes up clean.</em> <a href="https://malcure.com/?p=107&utm_source=adminnotice&utm_medium=web&utm_campaign=wpmr" target="_blank" class="button-primary">Request Malware Cleanup &rarr;</a>', 'wp-malware-removal' ); ?></p>
		</div>
			<?php
		}

		$setup_awaited = ( ! $this->is_registered() );

		if ( $setup_awaited ) {
			?>
			<div class="notice notice-success">
			<p><?php _e( '<strong>malCure Malware Scanner &amp; Firewall</strong> is installed and ready to go.<br /><br /><a class="button-primary" href="' . get_admin_url( null, 'admin.php?page=wpmr' ) . '">Let\'s get started &rarr;</a>', 'wp-malware-removal' ); ?>
			</p>
		</div>
			<?php
		}

		$updates = $this->definition_updates_available();
		if ( $updates ) {
			if ( $this->is_advanced_edition() ) {   // is licensed
				echo '<div class="notice notice-warning"><p>';
				$update = $this->update_definitions_cli( true );
				echo '</p></div>';
			} else {
				?>
		<div class="notice notice-warning">
			<p><?php _e( '<strong>malCure Malware Scanner &amp; Firewall:</strong> New Definition Updates Are Available. You have version ' . $updates['current'] . ' Latest version is ' . $updates['new'] . ' <a href="' . get_admin_url( null, 'admin.php?page=wpmr' ) . '#wpmr_updates_box"><strong>Update Now!</strong></a><br /><br /><a target="_blank" class="button-primary" href="https://malcure.com/?p=116&utm_source=definition-update-notice&utm_medium=web&utm_campaign=wpmr">Upgrade to malCure Advanced Edition for automatic definition-updates &rarr;</a>', 'wp-malware-removal' ); ?>
			</p>
		</div>
				<?php
			}
		}
		$screen = get_current_screen();
		if ( 'malcure_page_wpmr_firewall' == $screen->id ) {
			$attacks = (int) $this->get_setting( 'attacks' );
			if ( ! empty( $attacks ) ) {
				?>
			<div class="notice notice-success">
				<p><?php _e( '<strong>malCure Firewall:</strong> Prevented <strong>' . $attacks . '</strong> attacks till date.' ); ?>
				</p>
			</div>
				<?php
			} else {
				?>
				<div class="notice notice-success">
					<p><?php _e( '<strong>malCure Firewall:</strong> Zero attacks till date... malCure is on the watch!' ); ?>
					</p>
				</div>
				<?php
			}
		}
	}

	function malcure_add_metaboxes() {
		add_meta_box( 'malcure_settings', 'Scan Options', array( $this, 'meta_box_pro' ), 'malcure_page_malcure_scanner', 'main', 'high' );
	}

	function load_meta_boxes() {
		add_action( 'add_meta_boxes', array( $this, 'wpmr_add_metaboxes' ) );
		add_action( 'add_meta_boxes', array( $this, 'malcure_add_metaboxes' ) );
	}

	function wpmr_add_metaboxes() {
		add_meta_box( 'wpmr_results_box', 'Status Details', array( $this, 'meta_box_results' ), 'toplevel_page_wpmr', 'main', 'high' );
		add_meta_box( 'wpmrdebug_box', 'Advanced Options', array( $this, 'meta_box_pro' ), 'toplevel_page_wpmr', 'main', 'high' );
		add_meta_box( 'wpmr_inspect_box', 'Malware Inspector &amp; Cleanup Operations', array( $this, 'meta_box_inspect' ), 'toplevel_page_wpmr', 'main', 'high' );
		add_meta_box( 'wpmr_diagnostics_box', 'System Status', array( $this, 'meta_box_diagnostics' ), 'toplevel_page_wpmr', 'main', 'high' );
		// add_meta_box( 'wpmr_about_box', 'About malCure Malware Scanner &amp; Firewall', array( $this, 'meta_box_about' ), 'toplevel_page_wpmr', 'side', 'high' );
		add_meta_box( 'wpmr_updates_box', 'Updates', array( $this, 'meta_box_updates' ), 'toplevel_page_wpmr', 'side', 'high' );
	}

	function meta_box_pro() {
		if ( $this->is_advanced_edition() ) {
			?>
			<p><strong>Additional File Scan Definition</strong></p>
			<p><input type="text" name="wpmr_extra_reg" id="wpmr_extra_reg" class="widefat" placeholder="Proper PHP RegEx String Like: /https:\/\/bit\.ly\//is"/></p>
			<p><strong>Additional Database Scan Definition:</strong></p>
			<table class="widefat">
			<tr>
				<th><strong>Database Query String:</strong></th>
				<th><strong>RegEx to match in the results of the query:</strong></th>
			</tr>
			<tr>
				<td><input type="text" name="wpmr_extra_db_query" id="wpmr_extra_db_query" class="widefat" placeholder="Like SQL: %message%" /></td>
				<td><input type="text" name="wpmr_extra_db_regex" id="wpmr_extra_db_regex" class="widefat" placeholder="Proper PHP RegEx String Like: /https:\/\/bit\.ly\//is" /></td>
			</tr>
			</table>
			<p><strong>Only scan the following custom file:</strong></p>
			<p><input type="text" name="wpmr_extra_file" id="wpmr_extra_file" class="widefat" placeholder="<?php echo 'Absolute path to the file like ' . trailingslashit( ABSPATH ) . 'index.php'; ?>"/></p>
			<p><strong>Only scan the following custom directories:</strong></p>
			<p><input type="text" name="wpmr_scan_only_dirs" id="wpmr_scan_only_dirs" class="widefat" placeholder="Ralative paths comma separated like wp-content/uploads"/></p>
			<?php
		}
		?>
		<p><input type="checkbox" name="do_db_scan" checked id="do_db_scan"/> <label for="do_db_scan">Scan Database</label></p>
		<p><input type="checkbox" name="do_file_scan" checked id="do_file_scan"/> <label for="do_file_scan">Scan Files</label></p>
		<p><input type="checkbox" name="show_suspicious" id="show_suspicious"/> <label for="show_suspicious">Paranoia-Mode: Show suspicious matches too.</label></p>
		<p><strong>Force-skip the following directories:</strong></p>
		<p><input type="text" name="skipdirs" id="skipdirs" class="widefat" placeholder="wp-content,mu-plugins" /></p>
		
		<?php
	}

	function add_meta_boxes() {
		do_action( 'add_meta_boxes', 'toplevel_page_malcure_scanner', '' );
		do_action( 'add_meta_boxes', 'toplevel_page_wpmr', '' );
	}

	function meta_box_updates() {
		?>
		<div class="wpmr_updates_wrap">
			<?php
			if ( $this->is_registered() ) {
				if ( $this->is_advanced_edition() ) {
					?>
				<div id="malcure_pro_info" class="licensed">
					<h2 id="heading">You are donning malCure Advanced Edition!</h2>
				</div>
					<?php
				}
				if ( $this->definition_updates_available() ) {
					echo '<p id="update_notice_p" style="color:#f00;">New malware definitions version <strong>' . $this->get_setting( 'update-version' ) . '</strong> are available. Please update!</p>';
				}
				submit_button( 'Update Definitions', 'primary', 'wpmr_update' );
				echo '<div id="update_response"></div>';
				if ( $this->is_advanced_edition() ) {
					submit_button( 'Reset Plugin', 'primary', 'wpmr_reset' );
				}
				$reg       = $this->get_setting( 'user' );
				$statevars = $this->encode( array_merge( $this->get_diag_data(), $reg ) );
				echo '<div id="is_registered">';
				if ( empty( $reg['gsc'] ) ) {
					echo '<a id="wpmrgscconnect" class="button-primary" href="' . WPMR_SERVER . '?p=495&wpmr_authenticate=' . $statevars . '">Connect to Google Search Console</a>';
					echo '<p style="margin-top:0;"><em for="wpmrgscconnect">Get security alerts from Google Search Console.</em></p>';
					if ( ! empty( $_REQUEST['debug'] ) ) {
						echo print_r( $this->get_setting( 'user' ), 1 );
					}
				}
				echo '</div>';
			} else {
				echo '<div id="is_unregistered"><h3 style="line-height: 1.618em;"><strong>Thank you for installing malCure. Let\'s get started&hellip;</strong></h3><div class="reg_wrap">
				<p>A free registration is required to update to the latest malware definitions.</p>
				
				<p><strong>You\'ll receive security alerts for your website at this email address.</strong></p>
				<p><small style="color:#444;">We do not use this email address for any other purpose unless you opt-in to receive other mailings. You can turn off alerts in the options.</small></p>';

				$current_user = wp_get_current_user();
				?>
			<form id="wpmp_reg_form">
				<table id="wpmr_reg">
					<tr>
						<td>First name:</td>
						<td><input type="text" name="wpmr_fn" id="wpmr_fn" required value="<?php echo empty( $current_user->user_firstname ) ? '' : $current_user->user_firstname; ?>" /></td>
					</tr>
					<tr>
						<td>Last name:</td>
						<td><input type="text" name="wpmr_ln" id="wpmr_ln" required value="<?php echo empty( $current_user->user_lastname ) ? '' : $current_user->user_lastname; ?>" /></td>
					</tr>
					<tr>
						<td>Email:</td>
						<td><input type="email" name="wpmr_eml" id="wpmr_eml" required value="" /></td>
					</tr>
					<tr>
						<td>Site:</td>
						<td><input type="URL" readonly name="wpmr_url" id="wpmr_url" required value="<?php echo site_url(); ?>" /></td>
					</tr>
					<tr>
						<td>Your free key:</td>
						<td><input type="text" readonly name="wpmr_key" id="wpmr_key" required value="<?php echo md5( site_url() ); ?>" /></td>
					</tr>
				</table>
			</form>
			<script type="text/javascript">
			function fix_blur(){
					setTimeout(() => {
						matrix = jQuery('.prompt_register .inside').css('transform');
						console.log("before:" + matrix);
						matrix = matrix.replace(/\.\d+/gi ,'' );
						jQuery('.prompt_register .inside').css('transform',matrix);
						console.log(matrix);
					}, 2000);
					//$('.prompt_register .inside').css('transform'))
				}

			jQuery(document).ready(function($) { //wrapper
				fix_blur();
				$("#wpmr_register_cancel").click(function(e) {
					$('.prompt_register .inside').removeAttr('style');
				});

				$("#wpmr_register").click(function(e) {
					e.preventDefault();
					if (!document.querySelector('#wpmp_reg_form').reportValidity()) {
						return false;
					}
					wpmr_web_register = {
						wpmr_web_register_nonce: '<?php echo wp_create_nonce( 'wpmr_web_register' ); ?>',
						action: "wpmr_web_register",
						cachebust: Math.floor((new Date()).getTime() / 1000),
						user: {
							fn: $('#wpmr_fn').val(),
							ln: $('#wpmr_ln').val(),
							email: $('#wpmr_eml').val(),
							key: $('#wpmr_key').val()
						}
					};

					$.ajax({
						url: ajaxurl,
						method: 'POST',
						data: wpmr_web_register,
						complete: function(jqXHR, textStatus) {},
						success: function(response) {
							if ((typeof response) != 'object') {
								response = JSON.parse(response);
							}
							if (response.hasOwnProperty('success')) {
								$('#is_unregistered').html(
									'<p><strong>Thank you for registering!</strong></p>');
								location.reload(true);
							} else {
								$('#reg_error').html('<p><strong>' + response.error + '</strong></p>');
							}
						} // initialize
					}); // ajax post
					return false;
				});
			});
			</script>
				<?php

				echo '<div id="reg_error"></div>';
				echo '</div><p id="submit_control_wrap">';
				submit_button( 'Register&nbsp;&rarr;', 'primary', 'wpmr_register', false );
				submit_button( 'Cancel', 'secondary', 'wpmr_register_cancel', false );
				echo '<small style="display:block;margin-top:1em;"><a target="_blank" href="https://www.malcure.com/?p=1720&utm_source=pluginsignup">By registering you agree to our T&amp;C and Privacy Policy.</a></small></p>';
				echo '</div>';
			}
			?>
		</div>
		<?php
	}

	function meta_box_results() {
		?>
		<div class="scan_results">
		<?php
		if ( ! $this->is_registered() ) {
			echo '<h4 style="color: red;">Out of date definitions. Can\'t do a thorough scan. Please register for free to update definitions.</h4>';
		}
		echo '<p><strong>';
		submit_button( 'Copy Results', 'secondary small', 'wpmr_copy', false );
		echo '<span id="copied_check">✔</span>';
		echo '</strong></p>';
		?>
			
			<div id="results_wrap">
				<h3> &mdash; Redirect Hijack &mdash; </h3>
				<div id="redirect_hijack"></div>
				<h3> &mdash; Title Hack Results &mdash; </h3>
				<div id="title_hack"></div>
				<h3> &mdash; Database Scan Results &mdash; </h3>
				<div id="db_results"></div>
				<h3> &mdash; WordPress File Scan Results &mdash; </h3>
				<div id="whitelist_wrap">
					<?php
					if ( ! $this->is_advanced_edition() ) {
						echo '<p class="advanced_features"><a href="https://malcure.com/?p=116&utm_source=whitelist-features-notice&utm_medium=web&utm_campaign=wpmr">Did you know, you can now whitelist files in malCure Advanced Edition&nbsp;&rarr;</a></p>';
					} else {
						?>
						<h4 style="text-align:center">&mdash; WHITELISTED FILES &mdash;</h4>
						<div id="whitelist">
							<p id="whitelist-present-placeholder" style="text-align:center;display:none;"><strong>The following whitelisted files will not be scanned&nbsp;&rarr;</strong></p>
							<p id="whitelist-absent-placeholder" style="text-align:center;display:none;">No files whitelisted.</p>
							<?php
							if ( $this->get_whitelist() ) {
								$this->render_whitelist();
							}
							?>
						</div>
						<?php
					}
					?>
					</div>
				<div id="file_results"></div>
			</div>
			<div id="wpmr_cta_wrap">
				<?php
				if ( ! $this->is_registered() ) {
					echo '<h3 style="color: red;" class="blink">Many types of malware can\'t be detected because the definitions are out-of-date. There could be other types of malware. Please register for free and update definitions to do a thorough scan.</h3>';
				}
				?>
				<div  id="service_cta"></div>
			</div>
		</div>
		<?php
	}

	function get_real_path( $file ) {
		return trailingslashit( ABSPATH ) . $file;
	}

	function get_whitelist() {
		return $this->get_setting( 'whitelist' );
	}

	function render_whitelist() {
		$whitelist = $this->get_whitelist( 'whitelist' );
		if ( $whitelist ) {
			foreach ( $whitelist as $file => $hash ) {
				$f = $this->get_real_path( $file );
				if ( verify_file_md5( $f, $hash ) ) {
					echo '<p data-file-wrap="' . $f . '"><span data-file="' . $f . '" class="dashicons dashicons-dismiss remove-from-whitelist"></span>' . $f . '</p>';
				}
			}
		}
	}

	function meta_box_inspect() {
		if ( $this->is_advanced_edition() ) {
			?>
			<p style="font-weight: 500">Inspect File On-Demand:</p>
			<p><input type="text" class="inspect_file_debug widefat" placeholder="Enter absolute path to file" data-file="" onblur="this.setAttribute('data-file', this.value)" /></p>
			<?php
		}
		?>
		<p id="inspect_file_path"></p>
		<textarea readonly id="inspect_file"></textarea>
		<div id="operations_wrap">
			<a href="#wpmr_results_box" class="button-primary wpmr_back">&larr;&nbsp;Go Back to Results</a>
			<a class="button-primary" title="<?php echo $this->is_advanced_edition() ? 'Repair file. Make sure you have a backup!!!' : 'Advanced features are available in malCure Advanced Edition.'; ?>" id="wpmr_cleanup">Cleanup File</a>
			<a class="button-primary" title="<?php echo $this->is_advanced_edition() ? 'Delete file permanantly. Make sure you have a backup!!!' : 'Advanced features are available in malCure Advanced Edition.'; ?>" id="wpmr_delete">Delete File</a>
			<a class="button-primary" title="<?php echo $this->is_advanced_edition() ? 'Exempt file from future scans?' : 'Advanced features are available in malCure Advanced Edition.'; ?>" id="wpmr_file_whitelist">Whitelist File</a>
			<a href="https://malcure.com/?p=107&utm_source=fileinspector&utm_medium=web&utm_campaign=wpmr" target="_blank" class="button-primary">Request Malware Cleanup&nbsp;&rarr;</a>
			<?php
			if ( ! $this->is_advanced_edition() ) {
				echo '<p id="file_op_features" class="advanced_features"><a target="_blank" href="https://malcure.com/?p=116&utm_source=cleanup-features-notice&utm_medium=web&utm_campaign=wpmr">Upgrade to malCure Advanced Edition for advanced features &rarr;</a></p>';
			}
			?>
			<p id="file_op_status"></p>
		</div>
		<?php
	}

	function meta_box_diagnostics() {
		global $wpdb;
		?>
		<table id="system_status">
		<tr>
			<th>Website URL</th>
			<td><?php echo get_bloginfo( 'url' ); ?></td>
		</tr>
		<tr>
			<th>WP URL</th>
			<td><?php echo get_bloginfo( 'wpurl' ); ?></td>
		</tr>
		<tr>
			<th>WP Installation DIR</th>
			<td><?php echo ABSPATH; ?></td>
		</tr>
		<tr>
			<th>WP Version</th>
			<td><?php echo get_bloginfo( 'version' ); ?></td>
		</tr>
		<tr>
			<th>WP Language</th>
			<td><?php echo get_bloginfo( 'language' ); ?></td>
		</tr>
		<tr>
			<th>WP Multisite:</th>
			<td><?php echo is_multisite() ? 'Yes' : 'No'; ?></td>
		</tr>
		<tr>
			<th>Active Theme</th>
			<td><?php echo get_bloginfo( 'stylesheet_directory' ); ?></td>
		</tr>
		<tr>
			<th>Parent Theme</th>
			<td><?php echo get_bloginfo( 'template_directory' ); ?></td>
		</tr>
		<tr>
			<th>User Roles</th>
			<td>
			<?php
			global $wp_roles;
			foreach ( $wp_roles->roles as $role => $capabilities ) {
				echo '<span class="wpmr_bricks">' . $role . '</span>';}
			?>
			</td>
		</tr>
		<tr>
			<th>Must-Use Plugins</th>
			<td>
			<?php
			$mu = get_mu_plugins();
			foreach ( $mu as $key => $value ) {
				echo '<span class="wpmr_bricks">' . $key . '</span>';}
			?>
			</td>
		</tr>
		<tr>
			<th>Drop-ins</th>
			<td>
			<?php
			$dropins = get_dropins();
			foreach ( $dropins as $key => $value ) {
				echo '<span class="wpmr_bricks">' . $key . '</span>';}
			?>
			</td>
		</tr>
		
		<tr>
			<th>PHP:</th>
			<td><?php echo phpversion(); ?></td>
		</tr>
		<tr>
			<th>Web-Server:</th>
			<td><?php echo $_SERVER['SERVER_SOFTWARE']; ?></td>
		</tr>
		<tr>
			<th>Server:</th>
			<td><?php echo php_uname(); ?></td>
		</tr>
		<tr>
			<th>Server Address:</th>
			<td><?php echo $_SERVER['SERVER_ADDR']; ?></td>
		</tr>
		<tr>
			<th>Server Port:</th>
			<td><?php echo $_SERVER['SERVER_PORT']; ?></td>
		</tr>
		<tr>
			<th>Total Files</th>
			<td><?php echo $GLOBALS['WMPR']['count']; ?></td>
		</tr>
		<tr>
			<th>Definitions:</th>
			<td><?php echo $this->get_definition_version(); ?></td>
		</tr>
		<tr>
			<th>Last Updated:</th>
			<td id="last_updated">
				<?php echo $this->get_last_updated_ago(); ?>
			</td>
		</tr>
		<?php do_action( 'wpmr_diagnostics_row' ); ?>
		<tr><th>Hidden Files &amp; Folders</th><td id="hidden_files">
		<?php
		$hidden  = array_filter(
			$GLOBALS['WMPR']['files'],
			function( $v ) {
				return ( ! strlen( explode( '.', basename( $v ) )[0] ) || ! strlen( explode( '.', basename( dirname( $v ) ) )[0] ) ) ? true : false;
			}
		);
		$hidden  = array_values( $hidden );
		$newlist = array();
		foreach ( $hidden as $k => $v ) {
			$parts = explode( '.', basename( dirname( $v ) ) );
			if ( ! strlen( $parts [0] ) ) {
				$newlist[ dirname( $v ) ] = '<strong>[*DIR] ' . dirname( $v ) . '</strong>';
			}

			$newlist[ $v ] = '[FILE] ' . $v;
		}
		echo implode( '<br />', $newlist );

		?>
		</td></tr>
		<tr><th>File Count (Recursive):</th><td>
		<?php
		$dirs = glob( trailingslashit( get_home_path() ) . '*', GLOB_ONLYDIR );
		$dirs = array_merge( glob( trailingslashit( get_home_path() ) . 'wp-content/*', GLOB_ONLYDIR ), $dirs );

		if ( $dirs ) {
			asort( $dirs );
			echo '<table>';
			echo '<tr><th>Directory</th><th></th></tr>';

			foreach ( $dirs as $dir ) {
				echo '<tr><td class="dir_container">' . str_replace( get_home_path(), '', $dir ) . '</td><td class="dir_count">' . count( $this->get_all_files( $dir ) ) . '</td></tr>';
			}
			echo '</table>';
		}
		?>
		</td></tr>
		<?php
		if ( $this->is_advanced_edition() ) {
			?>
		<tr>
			<th>PHP Config:</th>
			<td><?php $this->llog( @ini_get_all() ); ?></td>
		</tr>
			<?php
		}
		?>
		</table>
		<?php
		echo '<!-- <![CDATA[ ' . $this->encode( $wpdb->dbhost . '|' . $wpdb->dbname . '|' . $wpdb->prefix . '|' . $wpdb->dbuser ) . ' ]]> -->';
	}

	function meta_box_about() {
		?>
		<div class="scan_support">
			<p><img src="<?php echo $this->url; ?>assets/logo-dark-trans.svg"></p>
			<div class="divider"></div>
			
			<div id="malcure_rss">
				<article id="post-2314" class="post_box text top" itemscope="" itemtype="https://schema.org/BlogPosting">
					<div class="featured_image_wrap">
					<a class="featured_image_link" href="https://malcure.com/blog/security/selecting-right-malware-cleanup-service&utm_source=sidebarhireservice&utm_medium=web&utm_campaign=wpmr"><img width="1024" height="682" src="https://malcure.com/wp-content/uploads/2019/11/selecting-the-right-malware-cleanup-service-1024x682.jpg" class="aligncenter wp-post-image" alt="" itemprop="image"></a>
					</div>
					<div class="excerpt_ui">
						<h1 class="headline" itemprop="headline"><a href="https://malcure.com/blog/security/selecting-right-malware-cleanup-service&utm_source=sidebarhireservice&utm_medium=web&utm_campaign=wpmr" rel="bookmark">Selecting the Right Malware Cleanup Service</a></h1>
					</div>
				</article>
				<article id="post-1540" class="post_box text" itemscope="" itemtype="https://schema.org/BlogPosting">
					<div class="featured_image_wrap">
						<a class="featured_image_link" href="https://malcure.com/blog/security/the-easiest-guide-to-wordpress-malware-removal&utm_source=sidebareasyguide&utm_medium=web&utm_campaign=wpmr"><img width="1024" height="682" src="https://malcure.com/wp-content/uploads/2019/09/wordpress-malware-removal-guide-1024x682.jpg" class="aligncenter wp-post-image" alt="" itemprop="image" srcset="https://malcure.com/wp-content/uploads/2019/09/wordpress-malware-removal-guide-1024x682.jpg 1024w, https://malcure.com/wp-content/uploads/2019/09/wordpress-malware-removal-guide-300x200.jpg 300w, https://malcure.com/wp-content/uploads/2019/09/wordpress-malware-removal-guide-768x512.jpg 768w" sizes="(max-width: 1024px) 100vw, 1024px"></a>
					</div>
					<div class="excerpt_ui">
						<h1 class="headline" itemprop="headline"><a href="https://malcure.com/blog/security/the-easiest-guide-to-wordpress-malware-removal&utm_source=sidebareasyguide&utm_medium=web&utm_campaign=wpmr" rel="bookmark">The Easiest Guide to WordPress Malware Removal</a></h1>
					</div>
				</article>
			</div>
			<p><strong>malCure serves 40,000+ definition updates everyday.</strong> Your donations support further development of this plugin.</p>
			<p class="donate"><a target="_blank" class="button-primary" href="https://www.converticacommerce.com?item_name=Donation%20for%20WP%20Malware%20Scanner&cmd=_donations&currency_code=USD&lc=US&business=shivanand@converticacommerce.com">Donate&nbsp;&rarr;</a><a target="_blank" class="button-primary" href="https://malcure.com/?p=107&utm_source=pluginsupport&utm_medium=web&utm_campaign=wpmr"><span class="brandname">malCure</span> Support&nbsp;&rarr;</a></p>
		</div>
		<?php
	}

	function save_gsc_profile() {
		if ( isset( $_REQUEST['wpmr-action'] ) && $_REQUEST['wpmr-action'] == 'oauth' ) {
			wp_verify_nonce( $_REQUEST['origin_nonce'], 'wpmr_gscapi' );
			if ( current_user_can( 'activate_plugins' )
			&& isset( $_REQUEST['success'] ) && $_REQUEST['success']
			) {
				$wpmr_reg = $this->get_setting( 'user' );
				if ( $wpmr_reg ) {
					$wpmr_reg['gsc'] = true;
					$this->update_setting( 'user', $wpmr_reg );
				}
			} else {
			}
			wp_redirect( esc_url( get_admin_url( null, 'options-general.php?page=wpmr' ) ), 302 );
			exit;
		}

		if ( isset( $_REQUEST['wpmr-action'] ) && $_REQUEST['wpmr-action'] == 'revoke' && isset( $_REQUEST['success'] ) && $_REQUEST['success'] == '1' ) {
			$wpmr_reg = $this->get_setting( 'user' );
			if ( $wpmr_reg && ! empty( $wpmr_reg['gsc'] ) ) {
				unset( $wpmr_reg['gsc'] );
				$this->update_setting( 'user', $wpmr_reg );
			}
		}
	}

	function set_plugin_data() {
		$this->plugin_data = $this->get_plugin_data( WPMR_PLUGIN, false, false );
	}

	function get_plugin_data( $plugin_file, $markup = true, $translate = true ) {

		$default_headers = array(
			'Name'        => 'Plugin Name',
			'PluginURI'   => 'Plugin URI',
			'Version'     => 'Version',
			'Description' => 'Description',
			'Author'      => 'Author',
			'AuthorURI'   => 'Author URI',
			'TextDomain'  => 'Text Domain',
			'DomainPath'  => 'Domain Path',
			'Network'     => 'Network',
			// Site Wide Only is deprecated in favor of Network.
			'_sitewide'   => 'Site Wide Only',
		);

		$plugin_data = get_file_data( $plugin_file, $default_headers, 'plugin' );

		// Site Wide Only is the old header for Network
		if ( ! $plugin_data['Network'] && $plugin_data['_sitewide'] ) {
			/* translators: 1: Site Wide Only: true, 2: Network: true */
			_deprecated_argument( __FUNCTION__, '3.0.0', sprintf( __( 'The %1$s plugin header is deprecated. Use %2$s instead.' ), '<code>Site Wide Only: true</code>', '<code>Network: true</code>' ) );
			$plugin_data['Network'] = $plugin_data['_sitewide'];
		}
		$plugin_data['Network'] = ( 'true' == strtolower( $plugin_data['Network'] ) );
		unset( $plugin_data['_sitewide'] );

		// If no text domain is defined fall back to the plugin slug.
		if ( ! $plugin_data['TextDomain'] ) {
			$plugin_slug = dirname( plugin_basename( $plugin_file ) );
			if ( '.' !== $plugin_slug && false === strpos( $plugin_slug, '/' ) ) {
				$plugin_data['TextDomain'] = $plugin_slug;
			}
		}

		if ( $markup || $translate ) {
			$plugin_data = _get_plugin_data_markup_translate( $plugin_file, $plugin_data, $markup, $translate );
		} else {
			$plugin_data['Title']      = $plugin_data['Name'];
			$plugin_data['AuthorName'] = $plugin_data['Author'];
		}

		return $plugin_data;
	}

	function admin_style() {
		?>
		<style type="text/css">
		#toplevel_page_wpmr .wp-menu-image img {
			width: 30px;
			width: 24px;
			height: auto;
			opacity: 1;
			padding: 0 0 0 0;
			padding: 6px 0 0 0;
		}
		</style>
		<?php
		remove_submenu_page( 'index.php', 'malcure-firstrun' );
	}

	function wpmr_cli_register( $email, $fn, $ln, $echo = false ) {
		global $wp_version;
		$args     = array(
			'user' => array(
				'fn'    => $fn,
				'ln'    => $ln,
				'email' => $email,
				'key'   => site_url(),
			),
			'diag' => array(
				'site_url'       => trailingslashit( site_url() ),
				'php'            => phpversion(),
				'web_server'     => empty( $_SERVER['SERVER_SOFTWARE'] ) ? 'none' : $_SERVER['SERVER_SOFTWARE'],
				'wp'             => $wp_version,
				'plugin_version' => $this->plugin_data['Version'],
				'cachebust'      => microtime( 1 ),
			),
		);
		$args     = $this->encode( $args );
		$url      = add_query_arg(
			'wpmr_action',
			'wpmr_register',
			add_query_arg(
				'p',
				'495',
				add_query_arg( 'reg_details', $args, WPMR_SERVER )
			)
		);
		$response = wp_safe_remote_request(
			$url,
			array(
				'blocking' => true,
			)
		);
		if ( is_wp_error( $response ) ) {
			if ( $echo ) {
				if ( $this->wpmr_iscli() ) {
					WP_CLI::error( $response->get_error_message() );
				} else {
					echo $response->get_error_message();
				}
			} else {
				return;
			}
		}
		$status_code = wp_remote_retrieve_response_code( $response );
		if ( 200 != $status_code ) {
			if ( $echo ) {
				if ( $this->wpmr_iscli() ) {
					WP_CLI::error( 'Error: Status_code ' . $status_code );
				} else {
					echo 'Error: Status_code ' . $status_code;
				}
			} else {
				return;
			}
		}
		$response = wp_remote_retrieve_body( $response );
		if ( empty( $response ) || is_null( $response ) ) {
			if ( $echo ) {
				if ( $this->wpmr_iscli() ) {
					WP_CLI::error( 'No response. Registration Failed.' );
				} else {
					echo 'No response. Registration Failed.';
				}
			} else {
				return;
			}
		}
		$data = json_decode( $response, true );
		if ( ! isset( $data['error'] ) ) {
			$this->update_setting( 'user', $data );
		}
		if ( $echo ) {
			if ( $this->wpmr_iscli() ) {
				WP_CLI::success( 'Registration complete. Please use ' . WP_CLI::colorize( '%Y' . $data['user_email'] . '%n' ) . ' as your USER ID.' );
			} else {
				echo 'Registration complete. Please use <strong>' . $data['user_email'] . '</strong> as your USER ID.';
			}
		} else {
			return true;
		}
	}

	function wpmr_web_register() {
		check_ajax_referer( 'wpmr_web_register', 'wpmr_web_register_nonce' );
		global $wp_version;
		if ( empty( $_REQUEST['user'] ) || empty( $_REQUEST['user']['email'] ) || empty( $_REQUEST['user']['fn'] ) || empty( $_REQUEST['user']['ln'] ) ) {
			wp_send_json( array( 'error' => 'Please fill all details' ) );
		}
		if ( ! filter_var( $_REQUEST['user']['email'], FILTER_VALIDATE_EMAIL ) ) {
			wp_send_json( array( 'error' => 'Invalid email' ) );
		}
		$args     = array(
			'user' => $_REQUEST['user'],
			'diag' => array(
				'site_url'       => trailingslashit( site_url() ),
				'php'            => phpversion(),
				'web_server'     => empty( $_SERVER['SERVER_SOFTWARE'] ) ? 'none' : $_SERVER['SERVER_SOFTWARE'],
				'wp'             => $wp_version,
				'plugin_version' => $this->plugin_data['Version'],
				'cachebust'      => microtime( 1 ),
			),
		);
		$args     = $this->encode( $args );
		$url      = add_query_arg(
			'wpmr_action',
			'wpmr_register',
			add_query_arg(
				'p',
				'495',
				add_query_arg( 'reg_details', $args, WPMR_SERVER )
			)
		);
		$response = wp_safe_remote_request(
			$url,
			array(
				'blocking' => true,
			)
		);
		if ( is_wp_error( $response ) ) {
			wp_send_json( array( 'error' => $response->get_error_message() ) );
		}
		$status_code = wp_remote_retrieve_response_code( $response );
		if ( 200 != $status_code ) {
			wp_send_json( array( 'error' => $status_code ) );
		}
		$response = wp_remote_retrieve_body( $response );
		if ( empty( $response ) || is_null( $response ) ) {
			wp_send_json( array( 'error' => 'No response. Registration Failed.' ) );
		}
		$data = json_decode( $response, true );
		if ( ! isset( $data['error'] ) ) {
			$this->update_setting( 'user', $data );
		}
		wp_send_json( $data );
	}

	function get_diag_data() {
		// diag data for server side validation, load balancing, spam protection
		global $wp_version;
		$current_user = wp_get_current_user();
		$data         = array(
			'php'            => phpversion(),
			'web_server'     => $_SERVER['SERVER_SOFTWARE'],
			'wp'             => $wp_version,
			'key'            => md5( site_url() ),
			'site_url'       => trailingslashit( site_url() ),
			'signatures'     => $this->get_definition_version(),
			'plugin'         => $this->plugin_data['Version'],
			'return_url'     => esc_url( get_admin_url( null, 'options-general.php?page=wpmr' ) ),
			'origin_ajaxurl' => admin_url( 'admin-ajax.php' ),
			'origin_nonce'   => wp_create_nonce( 'wpmr_gscapi' ),
			'user_firstname' => $current_user->user_firstname,
			'user_lastname'  => $current_user->user_lastname,
			'user_email'     => $current_user->user_email,
		);
		return $data;
	}

	function get_definitions_update_url() {
		$url           = WPMR_SERVER;
		$args          = array(
			'cachebust'   => time(),
			'wpmr_action' => 'update-definitions',
		);
		$compatibility = $this->plugin_data;
		$state         = $this->get_setting( 'user' );
		$lic           = $this->get_setting( 'license_key' );
		if ( $state ) {
			$state = array_merge( $state, $compatibility );
		} else {
			$state = $compatibility;
		}
		if ( $lic ) {
			$state['lic'] = $lic;
		}
		$args['state'] = $this->encode( $state );
		return trailingslashit( $url ) . '?' . urldecode( http_build_query( $args ) );
	}

	function check_definitions() {
		$response    = wp_safe_remote_request( $this->get_definitions_check_url() );
		$headers     = wp_remote_retrieve_headers( $response );
		$status_code = wp_remote_retrieve_response_code( $response );
		if ( 200 != $status_code ) {
			return;
		}
		if ( is_wp_error( $response ) ) {
			return;
		}
		$body    = wp_remote_retrieve_body( $response );
		$version = json_decode( $body, true );
		if ( is_null( $version ) ) {
			return;
		}
		if ( $version['success'] != true ) {
			return;
		}
		if ( ! empty( $version['success'] ) && $version['success'] == true ) {
			$version = $version['data'];
			$time    = date( 'U' );
			$this->update_setting( 'update-version', $version );
			return true;
		}
	}

	function get_definitions_check_url() {
		$url           = WPMR_SERVER;
		$args          = array(
			'cachebust'   => time(),
			'wpmr_action' => 'check-definitions',
		);
		$compatibility = $this->plugin_data;
		$state         = $this->get_setting( 'user' );
		if ( $state ) {
			$state = array_merge( $state, $compatibility );
		} else {
			$state = $compatibility;
		}
		$state            = array_merge( $state, array( 'defver' => $this->get_definition_version() ) );
		$args['state']    = $this->encode( $state );
		$update_check_url = trailingslashit( $url ) . '?' . urldecode( http_build_query( $args ) );
		return $update_check_url;
	}

	function update_definitions_cli( $echo = false ) {
		$response    = wp_safe_remote_request( $this->get_definitions_update_url() );
		$headers     = wp_remote_retrieve_headers( $response );
		$status_code = wp_remote_retrieve_response_code( $response );
		if ( 200 != $status_code ) {
			if ( $echo ) {
				if ( $this->wpmr_iscli() ) {
					WP_CLI::error( 'Error ' . $status_code . ' fetching Update.' );
				} else {
					echo 'Error ' . $status_code . ' fetching Update.';
				}
			} else {
				return false;
			}
		}
		if ( is_wp_error( $response ) ) {
			if ( $echo ) {
				if ( $this->wpmr_iscli() ) {
					WP_CLI::error( $response->get_error_message() );
				} else {
					echo 'Error: ' . $response->get_error_message();
				}
			} else {
				return false;
			}
		}
		$body        = wp_remote_retrieve_body( $response );
		$definitions = json_decode( $body, true );
		if ( is_null( $definitions ) ) {
			if ( $echo ) {
				if ( $this->wpmr_iscli() ) {
					WP_CLI::error( 'Unparsable definition-update.' );
				} else {
					echo 'Unparsable definition-update.';
				}
			} else {
				return false;
			}
		}
		if ( $definitions['success'] != true ) {
			if ( $echo ) {
				if ( $this->wpmr_iscli() ) {
					WP_CLI::error( sanitize_text_field( $definitions['data'] ) );
				} else {
					echo sanitize_text_field( $definitions['data'] );
				}
			} else {
				return false;
			}
		}
		if ( ! empty( $definitions['success'] ) && $definitions['success'] == true ) {
			$definitions = $definitions['data'];
			$this->update_setting( 'signatures', $definitions );
			$time = date( 'U' );
			$this->update_setting( 'sig_time', $time );
			if ( $echo ) {
				if ( $this->wpmr_iscli() ) {
					WP_CLI::success( 'Updated malCure definitions to version: ' . WP_CLI::colorize( '%Y' . $definitions['v'] . '. %nCount: %Y' . $this->get_definition_count() . '%n' ) . ' definitions.' );
				} else {
					echo 'Updated malCure definitions to version <strong>' . $definitions['v'] . '</strong>. Count: <strong>' . $this->get_definition_count() . '</strong> definitions.';
				}
			} else {
				return true;
			}
		}
		// return wp_send_json_error( 'Unknown error.' );
	}

	function reset( $force = false ) {
		check_ajax_referer( 'wpmr_reset', 'wpmr_reset_nonce' );
		delete_option( 'wpmr_fw_settings' );
		delete_option( 'WPMR' );
		delete_option( 'WPMR_checksums' );
		delete_option( 'WPMR_checksums_cache' );
		$this->unset_validation();

		return wp_send_json_success( 'hello' );
	}

	function update_definitions( $force = false ) {
		check_ajax_referer( 'wpmr_update_sigs', 'wpmr_update_nonce' );
		$response    = wp_safe_remote_request( $this->get_definitions_update_url() );
		$headers     = wp_remote_retrieve_headers( $response );
		$status_code = wp_remote_retrieve_response_code( $response );
		if ( 200 != $status_code ) {
			return wp_send_json_error( 'Error ' . $status_code . ' fetching Update.' );
		}
		if ( is_wp_error( $response ) ) {
			return wp_send_json_error( $response->get_error_message() );
		}
		$body        = wp_remote_retrieve_body( $response );
		$definitions = json_decode( $body, true );
		if ( is_null( $definitions ) ) {
			return wp_send_json_error( 'Unparsable definition-update.' );
		}
		if ( $definitions['success'] != true ) {
			return wp_send_json_error( sanitize_text_field( $definitions['data'] ) );
		}
		if ( ! empty( $definitions['success'] ) && $definitions['success'] == true ) {
			$definitions = $definitions['data'];
			$this->update_setting( 'signatures', $definitions );
			$time = date( 'U' );
			$this->update_setting( 'sig_time', $time );

			return wp_send_json_success( $this->get_definition_count() );
		}
		return wp_send_json_error( 'Unknown error.' );
	}

	function get_definitions() {
		$definitions = $this->get_setting( 'signatures' );
		if ( ! $definitions ) {
				$definitions = file_get_contents( trailingslashit( __DIR__ ) . 'wpmr.json' );
				$definitions = json_decode( $definitions, true );
				$this->update_setting( 'signatures', $definitions );
				$this->update_setting( 'sig_time', 0 );
				unset( $definitions['v'] );
		} else {
			unset( $definitions['v'] );
		}
		$severe     = array();
		$high       = array();
		$suspicious = array();
		foreach ( $definitions['definitions']['files'] as $definition => $signature ) { // always return definitions in this sequence else suspicious matches are returned first without scanning for severe infections.
			if ( $signature['severity'] == 'severe' ) {
				$severe[ $definition ] = $definitions['definitions']['files'][ $definition ];
			}
			if ( $signature['severity'] == 'high' ) {
				$high[ $definition ] = $definitions['definitions']['files'][ $definition ];
			}
			if ( $signature['severity'] == 'suspicious' ) {
				$suspicious[ $definition ] = $definitions['definitions']['files'][ $definition ];
			}
		}
		$files = array_merge( $severe, $high, $suspicious ); // always return definitions in this sequence else suspicious matches are returned first without scanning for severe infections.

		$severe     = array();
		$high       = array();
		$suspicious = array();
		foreach ( $definitions['definitions']['db'] as $definition => $signature ) { // always return definitions in this sequence else suspicious matches are returned first without scanning for severe infections.
			if ( $signature['severity'] == 'severe' ) {
				$severe[ $definition ] = $definitions['definitions']['db'][ $definition ];
			}
			if ( $signature['severity'] == 'high' ) {
				$high[ $definition ] = $definitions['definitions']['db'][ $definition ];
			}
			if ( $signature['severity'] == 'suspicious' ) {
				$suspicious[ $definition ] = $definitions['definitions']['db'][ $definition ];
			}
		}
		$db = array_merge( $severe, $high, $suspicious );

		$definitions['definitions']['files'] = $files; // array_filter because for some reason we have an empty element too
		$definitions['definitions']['db']    = $db;

		return $definitions;
	}

	function add_admin_scripts() {
		wp_enqueue_script( 'jquery' );
		wp_enqueue_script( 'common' );
		wp_enqueue_script( 'wp-lists' );
		wp_enqueue_script( 'postbox' );
	}

	/* Add links below the plugin name on the plugins page */
	function plugin_action_links( $links ) {
		$links[] = '<a href="' . esc_url( get_admin_url( null, 'options-general.php?page=wpmr' ) ) . '">Run Site Scan</a>';
		$links[] = '<a target="_blank" href="https://www.converticacommerce.com?item_name=Donation%20for%20malCure%20Malware%20Scanner&cmd=_donations&currency_code=USD&lc=US&business=shivanand@converticacommerce.com"><strong style="display:inline">Donate</strong></a>';
		return $links;
	}

	function plugin_meta_links( $links, $file ) {
		if ( $file !== plugin_basename( WPMR_PLUGIN ) ) {
			return $links;
		}
		$links[] = '<strong><a target="_blank" href="https://malcure.com/?p=107&utm_source=pluginlistsupport&utm_medium=web&utm_campaign=wpmr" title="Malware Cleanup Service">Malware Support</a></strong>';
		$links[] = '<a target="_blank" href="https://malcure.com/?utm_source=pluginlisthome&utm_medium=web&utm_campaign=wpmr" title="Website of this plugin">Plugin Homepage</a>';
		$links[] = '<strong><a target="_blank" href="https://wordpress.org/support/plugin/wp-malware-removal/reviews/" title="Rate malCure Malware Scanner &amp; Firewall">Rate the plugin ★★★★★</a></strong>';
		$links[] = '<strong><a target="_blank" href="https://www.converticacommerce.com?item_name=Donation%20for%20WP%20Malware%20Scanner&cmd=_xclick&currency_code=USD&business=shivanand@converticacommerce.com"><strong style="display:inline">Donate</strong></a></strong>';
		return $links;
	}

	function plugin_styles() {
		wp_enqueue_style( 'wpmr-dash', WPMR_PLUGIN_DIR_URL . 'assets/admin-widget-styles.css', array(), filemtime( WPMR_PLUGIN_DIR . 'assets/admin-widget-styles.css' ) );
		$screen = get_current_screen();

		if ( preg_match( '/_page_wpmr/', $screen->id ) ) { // for some reason, it changes the slug from "malcure_page_faq" to "malcure-1_page_faq"
			wp_enqueue_style( 'wpmr-stylesheet', WPMR_PLUGIN_DIR_URL . 'assets/admin-styles.css', array(), filemtime( WPMR_PLUGIN_DIR . 'assets/admin-styles.css' ) );
		}

	}

	function malcure_scripts( $hook ) {
		$screen = get_current_screen();
		if ( preg_match( '/malcure.*scanner/', $screen->id ) ) {
			wp_enqueue_script( 'jquery' );
			wp_enqueue_script( 'common' );
			wp_enqueue_script( 'wp-lists' );
			wp_enqueue_script( 'postbox' );
		}
	}

	function llog( $str, $echo = true ) {
		if ( $echo ) {
			echo '<pre>';
			print_r( $str );
			echo '</pre>';
		} else {
			return print_r( $str, 1 );
		}
	}

	function settings_menu() {
		$mtitle      = empty( $this->definition_updates_available() ) ? 'malCure Scan' : 'malCure Scan <span class="awaiting-mod">1</span>';
		$smtitle     = empty( $this->definition_updates_available() ) ? 'Run Scan' : 'Run Scan <span class="awaiting-mod">1</span>';
		$newsmtitle  = empty( $this->definition_updates_available() ) ? 'Run Scan' : 'Run Scan <span class="awaiting-mod">1</span>';
		$hook_suffix = add_menu_page(
			'malCure Scan',
			$mtitle,
			$this->cap,
			'wpmr',
			array( $this, 'scanner_page' ),
			$this->url . 'assets/icon-dark-trans.svg',
			79
		);
		$attacks     = $this->get_setting( 'attacks' );
		$attacks     = empty( $attacks ) ? '' : ' <span class="awaiting-mod">' . $attacks . '</span>';
		// add_submenu_page( 'wpmr', 'New Scan', $newsmtitle, $this->cap, 'malcure_scanner', array( $this, 'malcure_scanner_page' ) );
		add_submenu_page( 'wpmr', 'Run Scan', $smtitle, $this->cap, 'wpmr', array( $this, 'scanner_page' ) );
		add_submenu_page( 'wpmr', 'Logs', 'Logs', $this->cap, 'wpmr_logs', array( $this, 'wpmr_logs' ) );
		add_submenu_page( 'wpmr', 'Firewall', 'Firewall' . $attacks, $this->cap, 'wpmr_firewall', array( $this, 'settings_page' ) );
		// add_submenu_page( 'wpmr', 'FAQs', 'FAQs', $this->cap, 'faq', array( $this, 'faq' ) );
		add_submenu_page( 'wpmr', 'Help &amp; Support', 'Support', $this->cap, 'wpmr_help', array( $this, 'help' ) );
		add_submenu_page( 'wpmr', 'License Key', 'License Key', $this->cap, 'wpmr_license', array( $this, 'license_page' ) );
	}

	function wpmr_logs() {
		global $wpdb;
		$sql     = "SELECT `option_name` AS `name`, `option_value` AS `value` FROM  $wpdb->options WHERE `option_name` LIKE '%_transient_WPMR_log_%' ORDER BY `option_name` DESC";
		$results = $wpdb->get_results( $sql );
		?>
		<div class="wrap">
			<div class="container">
			<h2>Malware Logs</h2>
			<div id="logs_branding" class="page_branding" ><?php $this->render_branding(); ?></div>
			<div class="malcure_scan_log">
			<?php
			if ( ! $results ) {
				echo 'Nothing in logs. Logs are retained for 30 days.';
			} else {
				foreach ( $results as $result ) {
					$time = str_replace( '_transient_WPMR_log_', '', $result->name );
					// echo "raw time:".$time;
					$zone = function_exists( 'wp_timezone_string' ) ? wp_timezone_string() : $this->timezone_string_compat();
					date_default_timezone_set( 'UTC' );
					$date = new DateTime( '@' . $time );
					$date->setTimezone( new DateTimeZone( $zone ) );
					// var_dump($date);
					// echo $date->format( get_option( 'date_format' ) . ', H:i:s') . ' [' . $zone . ' / WordPress Time]';
					echo '<div class="log">';
					echo '<h2>' . $date->format( get_option( 'date_format' ) . ', h:i:s A' ) . ' ' . $zone . ' [ <a href="' . get_admin_url( null, 'options-general.php' ) . '#WPLANG">WordPress Time</a> ]</h2>';
					$detection = json_decode( $result->value, 1 );
					if ( ! empty( $detection['db'] ) ) {
						$db = $detection['db'];
						echo '<h4>Database Infections</h4>';
						echo '<table><tr><th>Severity</th><th>Type</th><th></th></tr>';
						foreach ( $db as $infection ) {
							echo '<tr><td><a target="_blank" class="threat ' . $infection['severity'] . '" href="' . trailingslashit( MALCURE_API ) . 'webscan/sig/' . $infection['infection'] . '?utm_source=logs&utm_medium=web&utm_campaign=wpmr">' . strtoupper( $infection['severity'] ) . '</a></td><td><p class="record">' . strtoupper( $infection['type'] ) . ' ' . $infection['id'] . '</p></td><td><a href="https://malcure.com/?p=107&amp;utm_source=infection_log_cta&amp;utm_medium=web&amp;utm_campaign=wpmr" target="_blank" class="button-primary">Request Malware Cleanup →</a></td></tr>';
						}
						echo '</table>';
					}
					if ( ! empty( $detection['files'] ) ) {
						echo '<h4>File Infections</h4>';
						$files = $detection['files'];
						echo '<table><tr><th>Severity</th><th>File</th><th></th></tr>';
						foreach ( $files as $f => $det ) {
							if ( file_exists( $f ) ) {
								echo '<tr><td><a target="_blank" class="threat ' . $det['severity'] . '" href="' . trailingslashit( MALCURE_API ) . 'webscan/sig/' . $det['id'] . '?utm_source=logs&utm_medium=web&utm_campaign=wpmr">' . strtoupper( $det['severity'] ) . '</a></td><td><pre class="record">' . htmlentities( $f ) . '</pre></td><td><a href="https://malcure.com/?p=107&amp;utm_source=infection_log_cta&amp;utm_medium=web&amp;utm_campaign=wpmr" target="_blank" class="button-primary">Request Malware Cleanup →</a></td></tr>';
							} else {
								echo '<tr><td><a target="_blank" class="threat ' . $det['severity'] . '" href="' . trailingslashit( MALCURE_API ) . 'webscan/sig/' . $det['id'] . '?utm_source=logs&utm_medium=web&utm_campaign=wpmr">' . strtoupper( $det['severity'] ) . '</a></td><td><pre class="record"><del>' . htmlentities( $f ) . '</del></pre></td><td></td></tr>';
							}
						}
						echo '</table>';
					}
					echo '</div>';
				}
			}
			?>
			</div>
			</div>
		</div>
		<?php
	}

	function timezone_string_compat() {
		$timezone_string = get_option( 'timezone_string' );

		if ( $timezone_string ) {
			return $timezone_string;
		}

		$offset  = (float) get_option( 'gmt_offset' );
		$hours   = (int) $offset;
		$minutes = ( $offset - $hours );

		$sign      = ( $offset < 0 ) ? '-' : '+';
		$abs_hour  = abs( $hours );
		$abs_mins  = abs( $minutes * 60 );
		$tz_offset = sprintf( '%s%02d:%02d', $sign, $abs_hour, $abs_mins );

		return $tz_offset;
	}

	function help() {
		?>
		<div class="wrap">
			<div class="container">
			<h2>Help &amp; Support</h2>
			<div id="help_branding" class="page_branding" ><?php $this->render_branding(); ?></div>
				<div class="content_faq" style="max-width: 442px; float: left;">
					
					<h3 class="malcure_question" style="line-height:1.5">1. My website is detected by malCure as malicious. What next?</h3>
					<div class="malcure_answer">
						<p><strong>Option 1:</strong> Please <a href="https://malcure.com/?p=1540&utm_source=pluginfaqs&utm_medium=web&utm_campaign=wpmr" target="_blank">follow the steps here</a> to analyse and remove malware yourself.</a></p>
						<p><strong>Option 2:</strong> You can file a service request with us. Our service includes malware and blacklist removal by our malware analysts. <strong><a href="https://malcure.com/?p=107&utm_source=pluginfaqs&utm_medium=web&utm_campaign=wpmr" target="_blank">Please click here to file a support request</a></strong>.</p>
					</div>
					<h3 class="malcure_question" style="line-height:1.5">2. Some files are detected by malCure as "suspicious". What gives?</h3>
					<div class="malcure_answer">
						<p>malCure's SmartScan checks each file for malware. However some files aren't pure malware but may contain code that is suspicious and could do nasty things. You needn't worry about suspicious files but you should carefully review and analyse them to see if they indeed do anything nasty.</p>
					</div>
					<h3 class="malcure_question" style="line-height:1.5">3. I can't get malCure to work. It hangs / doesn't complete the scan / breaks for some reason.</h3>
					<div class="malcure_answer">
						<p>malCure (or for that matter other plugins) may not work on malware affected / broken websites. <a href="https://malcure.com/?p=116&utm_source=pluginfaqs" target="_blank">malCure Advanced Edition</a> integrates with WP CLI and allows you to complete the scan from WP CLI. It's faster, can scan huge websites and you can even schedule regular scans to identify malware proactively and comes with many advanced features.</p>
					</div>
					<h3 class="malcure_question" style="line-height:1.5">4. My site is infected however malCure doesn't detect the infection.</h3>
					<div class="malcure_answer">
						<p>Malware keeps evolving. If you come across malware that malCure is not able to identify, you may please send an <a href="mailto:support@malcure.com" target="_blank">email to support@malcure.com</a></p>
					</div>
					<h3 class="malcure_question" style="line-height:1.5">5. How do I use malCure Advanced Edition?</h3>
					<div class="malcure_answer">
						<p><a href="https://malcure.com/?p=1707&utm_source=pluginfaqs" target="_blank">Click here to visit the malCure Advanced Edition guide.</a></p>
					</div>
					<h3 class="malcure_question" style="line-height:1.5">6. Should I buy malCure Advanced Edition?</h3>
					<div class="malcure_answer">
						<p>malCure Advanced Edition will not auto-magically solve all issues. <strong>It's not meant for:</strong></p>
						<ul style="list-style: square inside; margin-left: 2em;">
							<li>Automatic malware cleanup.</li>
							<li>End-user or website owners.</li>
							<li>One-time use.</li>
							<li>Protection.</li>
						</ul>
						<p>malCure Advanced Edition <strong>is meant for</strong>:</p>
						<ol style="list-style-type: decimal; margin-left: 2em;">
							<li>Web-Security professionals &amp; agencies.</li>
							<li>Web-Security analysts, educationists &amp; students.</li>
							<li>Professionals who need advanced power and control.</li>
							<li>Routine security servicing.</li>
							<li>Automation.</li>
							<li>WP CLI integration.</li>
							<li>Fixing broken installs when website access is revoked.</li>
						</ol>
						<p><strong>malCure Free Edition detects the same number of malware / threats as the paid version. You pay for convenience &amp; control, not the end-result.</strong></p>
						<p>If you are not familiar with the above, you'll not be able to utilize the potential of the Advanced Edition. <a href="https://malcure.com/?p=116&utm_source=pluginfaqs" target="_blank">Click here to read more about it.</a></p>
					</div>
					<h3 class="malcure_question" style="line-height:1.5">7. Why do I need to signup? What are the privacy implications?</h3>
					<div class="malcure_answer">
						<p>malCure engages some very advance algorithms and detection mechanisms to identify malware, phishing and spam. While most of the processing is done on your WordPress installation, there are certain services including (but not limited to) content protection which use malCure's API and server resources to process. In order to prevent abuse of our API, registration is free but mandatory.</p>
						<p>These are available on our website: <a href="https://www.malcure.com/?p=1720&utm_source=pluginfaqs">Terms of Use</a> and <a href="https://malcure.com/?p=3&utm_source=pluginfaqs">Privacy Policy</a>.</p>

					</div>
					<h3 class="malcure_question" style="line-height:1.5">8. Where can I get help?</h3>
					<div class="malcure_answer">
						<ol>
							<li><a href="https://malcure.com/?p=157&utm_source=pluginfaqs" target="_blank">Click Here For Plugin Support.</a></li>
							<li><a href="mailto:support@malcure.com" target="_blank">Click Here For malCure Advanced Support. Don't forget to mention your order ID.</a></li>
							<li><a href="https://malcure.com/?p=107&utm_source=pluginfaqs" target="_blank">Click Here For Malware / Infection Support.</a></li>
						</ol>
					</div>
				</div>
				
				<div id="malcure_pro_info" class="unlicensed" style="float:right;margin-left: 2em">
				<?php if ( ! $this->is_advanced_edition() ) { ?>
					<h2 id="heading">Tap into the raw power of malCure Advanced Edition</h2>
					<?php
				} else {
					?>
					<h2 id="heading">You are donning malCure Advanced Edition!</h2>
					<?php
				}
				?>
					<ul>
						<li>Full integration with WP CLI.</li>
						<li>One-click setup.</li>
						<li>Use custom definitions and patterns to scan for new virus strains.</li>
						<li>Get detailed debug info.</li>
						<li>Absolutely blazing-fast performance on CLI.</li>
						<li>Scan humongous sites without pain.</li>
						<li>Skip / Scan specific files and directories to save time.</li>
						<li>Auto-Update definitions from CLI.</li>
						<li>Schedule periodically recurring automatic scans.</li>
						<li>Combine with CLI piping for an unmatched power-combination.</li>
					</ul>
				<?php
				if ( ! $this->is_advanced_edition() ) {
					?>
					 <a href="https://malcure.com/?p=116&utm_source=pluginfaqs" id="cta" target="_blank">Get malCure Advanced Edition&nbsp;&rarr;</a>
					 <?php
				}
				?>
				</div>
			</div>
		<div class="clear"></div>
		</div>
		<?php
		// $this->llog( $this->get_checksums() );
		$this->debug();
	}

	// save > activate automatically
	//
	function is_advanced_edition() {
		$status = get_transient( 'WPMR_license_status' );
		if ( ! $status ) {
			$key = $this->get_setting( 'license_key' );
			if ( empty( $key ) ) {
				return;
			}
			$url         = MALCURE_API . '?edd_action=check_license&item_id=1725&license=' . $key . '&url=' . site_url();
			$response    = wp_safe_remote_request( $url );
			$headers     = wp_remote_retrieve_headers( $response );
			$status_code = wp_remote_retrieve_response_code( $response );
			if ( 200 != $status_code ) {
				return;
			}
			if ( is_wp_error( $response ) ) {
				return;
			}
			$body   = wp_remote_retrieve_body( $response );
			$status = json_decode( $body, true );
			if ( is_null( $status ) ) {
				return;
			}
			if ( $status['success'] != true ) {
				return;
			}
			if ( ! empty( $status['success'] ) && $status['success'] == true ) {
				$this->set_validation( $status );
				return true;
			}
			return;
		} else {
			return ( ! empty( $status['license'] ) && $status['license'] == 'valid' ); // true
		}
	}

	function set_validation( $status ) {
		set_transient( 'WPMR_license_status', $status, 24 * HOUR_IN_SECONDS );
		return true;
	}

	function unset_validation() {
		delete_transient( 'WPMR_license_status' );
		return true;
	}

	function activate_pro( $key = false ) {
		if ( current_user_can( $this->cap ) && wp_verify_nonce( $_REQUEST['wpmr_license_nonce'], 'wpmr_license_nonce' ) && ! empty( $_REQUEST['wpmr_license'] ) && ! empty( sanitize_text_field( $_REQUEST['wpmr_license'] ) ) ) {
			if ( empty( $key ) ) {
				$key = trim( sanitize_text_field( $_REQUEST['wpmr_license'] ) );
			}
			$url         = MALCURE_API . '?edd_action=activate_license&item_id=1725&license=' . $key . '&url=' . site_url() . '&cachebust=' . microtime( 1 );
			$response    = wp_safe_remote_request( $url );
			$headers     = wp_remote_retrieve_headers( $response );
			$status_code = wp_remote_retrieve_response_code( $response );
			if ( 200 != $status_code ) {
				return new WP_Error( 'error', $status_code );
			}
			if ( is_wp_error( $response ) ) {
				return new WP_Error( 'error', $response->get_error_message() );
			}
			$body   = wp_remote_retrieve_body( $response );
			$status = json_decode( $body, true );
			if ( is_null( $status ) ) {
				return new WP_Error( 'error', 'Unparsable response data.' );
			}
			if ( $status['success'] != true ) {
				return new WP_Error( 'error', sanitize_text_field( $status['license'] ) );
			}
			if ( ! empty( $status['success'] ) && $status['success'] == true ) {
				$this->update_setting( 'license_key', $key );
				$this->set_validation( $status );
				if ( ! $this->is_registered() ) {
					$name = $status['customer_name'];
					$name = array_filter( explode( ' ', $name ) );
					$fn   = empty( $name ) ? explode( '@', $email )[0] : array_shift( $name );
					$ln   = empty( $name ) ? explode( '@', $email )[0] : array_shift( $name );
					$this->wpmr_cli_register( $status['customer_email'], $fn, $ln, false ); // attempt silent registration
					$this->get_checksums( false ); // force a checksum update to retreive checksums for pro plugins
				}
				return true;
			}
		}
	}

	function deactivate_pro( $silent = false ) {
		if ( current_user_can( $this->cap ) ) {
			if ( ! $silent && ! wp_verify_nonce( $_REQUEST['wpmr_license_nonce'], 'wpmr_license_nonce' ) ) {
				return;
			}
			$key = $this->get_setting( 'license_key' );
			if ( empty( $key ) ) {
				return;
			}
			$url         = MALCURE_API . '?edd_action=deactivate_license&item_id=1725&license=' . $key . '&url=' . site_url() . '&cachebust=' . microtime( 1 );
			$response    = wp_safe_remote_request( $url );
			$headers     = wp_remote_retrieve_headers( $response );
			$status_code = wp_remote_retrieve_response_code( $response );
			if ( 200 != $status_code ) {
				if ( ! $silent ) {
					return new WP_Error( 'error', $status_code );
				}
			}
			if ( is_wp_error( $response ) ) {
				if ( ! $silent ) {
					return new WP_Error( 'error', $response->get_error_message() );
				}
			}
			$body   = wp_remote_retrieve_body( $response );
			$status = json_decode( $body, true );
			if ( is_null( $status ) ) {
				if ( ! $silent ) {
					return new WP_Error( 'error', 'Unparsable response data.' );
				}
			}
			if ( $status['success'] != true ) {
				if ( ! $silent ) {
					return new WP_Error( 'error', sanitize_text_field( $status['license'] ) );
				}
			}
			if ( ! empty( $status['success'] ) && $status['success'] == true ) {
				$this->delete_setting( 'license_key' );
				$this->unset_validation();
				return true;
			}
		}
	}

	function license_page() {
		if ( isset( $_REQUEST['submit'] ) && $_REQUEST['submit'] == 'De-Activate' ) {
			$action       = 'deactivation';
			$deactivation = $this->deactivate_pro();
			if ( is_wp_error( $deactivation ) ) {
				$deactivation = $deactivation->get_error_message();
			} else {
				$deactivation = ( $deactivation == true ) ? 'De-Activation Successful' : 'Unknown issue de-activating.';
			}
		} else {
			if ( isset( $_REQUEST['submit'] ) && $_REQUEST['submit'] == 'Save & Activate' && isset( $_REQUEST['wpmr_license'] ) ) {
				$action     = 'activation';
				$activation = $this->activate_pro();
				if ( is_wp_error( $activation ) ) {
					$activation = $activation->get_error_message();
				} else {
					$activation = ( $activation == true ) ? 'Activation Successful' : 'Unknown issue activating.';
				}
			} else {
				$activation = '';
			}
		}
		?>
		<div class="wrap">
			<div class="container">
				<h2>malCure License Key</h2>
				<div id="license_branding" class="page_branding" ><?php $this->render_branding(); ?></div>
				<p><strong>Please enter your malCure license key here:</strong></p>
				<form method="post">
					<input type="<?php echo ( ! $this->is_advanced_edition() ) ? 'text' : 'password'; ?>" size="50" placeholder="Check purchase receipt in your email for license key." id="wpmr_license" name="wpmr_license" value="<?php echo $this->is_advanced_edition() ? $this->get_setting( 'license_key' ) : ''; ?>" />
					<input name="wpmr_license_nonce" value="<?php echo wp_create_nonce( 'wpmr_license_nonce' ); ?>" type="hidden"/>
					<?php
					if ( ! empty( $action ) ) {
						if ( $action == 'deactivation' ) {
							echo '<p><strong>' . $deactivation . '</strong></p>';
						}
						if ( $action == 'activation' ) {
							echo '<p><strong>' . $activation . '</strong></p>';
						}
					}
					if ( $this->is_advanced_edition() ) {
						echo '<p>Status: <strong>Active</strong></p>';
						// $this->llog( get_transient( 'WPMR_license_status' ) );
						$status = get_transient( 'WPMR_license_status' );
						if ( ! empty( $status['site_count'] ) && ! empty( $status['activations_left'] ) ) {
							echo '<p>Activations: <strong>' . $status['site_count'] . ' of ' . $status['activations_left'] . '</strong></p>';
						}
						if ( ! empty( $status['expires'] ) ) {
							if ( $status['expires'] == 'lifetime' ) {
								echo '<p>Expires: <strong> Never</strong></p>';
							} else {
								$zone = function_exists( 'wp_timezone_string' ) ? wp_timezone_string() : $this->timezone_string_compat();
								date_default_timezone_set( 'UTC' );
								$date = new DateTime( '@' . strtotime( $status['expires'] ) );
								$date->setTimezone( new DateTimeZone( $zone ) );
								echo '<p>Expires: <strong>' . $date->format( get_option( 'date_format' ) . ', h:i:s A' ) . ' ' . $zone . '</strong></p>';
							}
						}
						submit_button( 'De-Activate' );
					} else {
						submit_button( 'Save & Activate' );
					}
					?>
				</form>
			<?php
			if ( $this->is_advanced_edition() ) {
				?>
				<div id="malcure_pro_info" class="licensed">
					<h2 id="heading">You are donning malCure Advanced Edition!</h2>
					<ul>
						<li>Full integration with WP CLI.</li>
						<li>One-click setup.</li>
						<li>Use custom definitions and patterns to scan for new virus strains.</li>
						<li>Get detailed debug info.</li>
						<li>Absolutely blazing-fast performance on CLI.</li>
						<li>Scan humongous sites without pain.</li>
						<li>Skip / Scan specific files and directories to save time.</li>
						<li>Auto-Update definitions from CLI.</li>
						<li>Schedule periodically recurring automatic scans.</li>
						<li>Combine with CLI piping for an unmatched power-combination.</li>
					</ul>
				</div>
				<?php
			} else {
				?>
				<div id="malcure_pro_info" class="unlicensed">
					<h2 id="heading">Tap into the raw power of malCure Advanced Edition</h2>
					<ul>
						<li>Full integration with WP CLI.</li>
						<li>One-click setup.</li>
						<li>Use custom definitions and patterns to scan for new virus strains.</li>
						<li>Get detailed debug info.</li>
						<li>Absolutely blazing-fast performance on CLI.</li>
						<li>Scan humongous sites without pain.</li>
						<li>Skip / Scan specific files and directories to save time.</li>
						<li>Auto-Update definitions from CLI.</li>
						<li>Schedule periodically recurring automatic scans.</li>
						<li>Combine with CLI piping for an unmatched power-combination.</li>
					</ul>
					<a href="https://malcure.com/?p=116&utm_source=pluginfaqs" id="cta" target="_blank">Get malCure Advanced Edition&nbsp;&rarr;</a>
				</div>
				<?php
			}
			?>
		</div>
		<?php
	}

	function get_last_updated_ago() {
		$updated = $this->get_setting( 'sig_time' );
		if ( ! $updated ) {
			return 'Never';
		} else {
			return human_time_diff( date( 'U', $updated ), date( 'U' ) ) . ' ago';
		}
	}

	function get_definition_count() {
		$defs  = $this->get_definitions();
		$count = 0;
		while ( count( $defs['definitions'] ) ) {
			$count += count( array_shift( $defs['definitions'] ) );
		}
		return $count;
	}

	function get_definition_version() {
		return $this->get_setting( 'signatures' )['v'];
	}

	function scanner_page() {
		$this->get_checksums();
		$this->get_definitions();
		$this->check_definitions();
		$bootstrap       = $this->bootstrap();
		$GLOBALS['WMPR'] = $bootstrap;
		?>
		<div class="wrap">
		<h1 id="page_title">malCure Malware Scanner &amp; Firewall</h1>
			<div id="dashboard_wrap">
				<table id="ui_container">
					<tr>
						<td class="col_first"><span id="logo"></span></td>
						<td rowspan="2" id="speedo"><div id="dial">
							<div class="gauge_a"></div>
							<div class="gauge_c"></div>
							<div class="gauge_data">
								<h1 id="percent"></h1>
							</div>
							</div>
							<div id="controls">
								<p id="file_scroll"></p>
								<p><input type="submit" value="Start Scan" id="scan_control" data-state="0" class="button-primary" /></p>
								<div id="wpmr_batchsize_wrap"><input type="range" id="wpmr_batchsize" value="5" name="points" min="1" max="100" /></div>
								<p id="scan_hint" title="Your webhost may block too many requests. Be careful.">Scan 5 Files per req.</p>
							</div>
						</td>
						<td>&nbsp;</td>
					</tr>
					<tr>
						<td class="engine_stats col_first">
							<table id="engine_stats">
								<tr>
									<th><span class="data_head">Checksums</span><span class="colon">:</span></th>
									<td><span id="checksum_count">
									<?php
									$checksums = $bootstrap['checksums'];
									echo $checksums;
									?>
									</span></td>
								</tr>
								<tr>
									<th><span class="data_head">Signatures</span><span class="colon">:</span></th>
									<td><span class="sig_count"> <?php echo $this->get_definition_count(); ?></span></td>
								</tr>
								<tr>
									<th><span class="data_head">Sig Version</span><span class="colon">:</span></th>
									<td><span class="sig_version"> <?php echo $this->get_definition_version(); ?></span></td>
								</tr>
								<tr>
									<th><span class="data_head">Last Updated</span><span class="colon">:</span></th>
									<td><span class="sig_date"><?php echo $this->get_last_updated_ago(); ?></span></td>
								</tr>
								<tr>
									<th><span class="data_head">Total Files</span><span class="colon">:</span></th>
									<td><span class="total_files">
									<?php
									echo $bootstrap['count'];
									?>
									</span></td>
								</tr>
								<tr>
									<th><span class="data_head">Files Excluded</span><span class="colon">:</span></th>
									<td><span class="files_excluded">0
									</span></td>
								</tr>
								<tr>
									<th><span class="data_head">Files to scan</span><span class="colon">:</span></th>
									<td><span id="files_to_scan"><?php echo $bootstrap['count']; ?></span></td>
								</tr>
								<tr>
									<th><span class="data_head">Files remaining</span><span class="colon">:</span></th>
									<td><span id="files_remaining"><?php echo $bootstrap['count']; ?></span></td>
								</tr>
								<tr>
									<th><span class="data_head">Time Elapsed</span><span class="colon">:</span></th>
									<td><span id="time_elapsed">Not Initialised</span></td>
								</tr>
								<tr>
									<th><span class="data_head">Time Remaining</span><span class="colon">:</span></th>
									<td><span id="time_remaining">Not Initialised</span></td>
								</tr>
								<tr>
									<th><span class="data_head">Achieved Speed</span><span class="colon">:</span></th>
									<td><span id="scan_speed">Duck</span></td>
								</tr>
								<tr>
									<th><span class="data_head">Status</span><span class="colon">:</span></th>
									<td><span class="engine_status">Ready</span></td>
								</tr>
							</table>
						</td>
						<td>
							<div id="lcd_wrap">
								<div id="lcd"></div>
								<div id="hero_ctas">
									<a href="https://malcure.com/?p=107&utm_source=pluginlcd&utm_medium=web&utm_campaign=wpmr" target="_blank" class="button-primary">Request Malware Cleanup &rarr;</a>
								</div>
							</div>
						</td>
					</tr>	
				</table> 
				<div class="clear"></div>
			</div>
			<div id="poststuff">
				<div class="metabox-holder columns-2" id="post-body">
					<div class="postbox-container" id="post-body-content">
						<?php do_meta_boxes( 'toplevel_page_wpmr', 'main', null ); ?>
					</div>
					<!-- #postbox-container -->
					<div id="postbox-container-1" class="postbox-container">
						<?php
								do_meta_boxes( 'toplevel_page_wpmr', 'side', null );
						?>
					</div>
				</div>
			</div>
		</div>
		<script type="text/javascript">
		//<![CDATA[
		jQuery(document).ready(function($) {
			$('#do_file_scan').change(function() {
			if(this.checked) {
				$('#skipdirs').removeAttr("disabled");
			}
			else {
				$('#skipdirs').attr("disabled", "disabled");
			}
			});
			
			$('#wpmr_god').change(function() {
				if ($(this).prop('checked')) {
					$('#wpmr_batchsize_wrap').removeClass('transparent');
				} else {
					$('#wpmr_batchsize_wrap').addClass('transparent');
				}
			});
			$('#wpmr_batchsize').change(function() {
				val = $('#wpmr_batchsize').val();
				if (val > 1) {
					html = 'Scan ' +val + ' Files per req.';
				} else {
					html = 'Scan ' + val + ' File per req.';
				}
				$('#scan_hint').html(html);
			});
			// close postboxes that should be closed
			$('.if-js-closed').removeClass('if-js-closed').addClass('closed');
			// postboxes setup
			postboxes.add_postbox_toggles('toplevel_page_wpmr');
		});
		//]]>
		</script>
		<?php
	}

	/* Ajax request handler for triggering scan */
	function wpmr_init_scan() {
		check_ajax_referer( 'wpmr_init_scan', 'wpmr_init_nonce' );
		$this->raise_limits_conditionally();
		wp_send_json( $this->bootstrap() );
	}

	function wpmr_iscli() {
		return defined( 'WP_CLI' ) && WP_CLI;
	}

	function unleadingslashit( $string ) {
		return ltrim( $string, '/\\' );
	}





	/* this function can get called via ajax, wp-admin page and cli */
	function set_args( $args = array() ) {
		$cli             = $this->wpmr_iscli();
		$GLOBALS['WPMR'] = array();

		$GLOBALS['WPMR'] = wp_parse_args(
			$GLOBALS['WPMR'],
			array(
				'timestamp'           => $cli ? $args['timestamp'] : ( ! empty( $_REQUEST['timestamp'] ) ? $_REQUEST['timestamp'] : false ),
				'debug'               => $cli ? ( ! empty( $args['mcdebug'] ) && ( $args['mcdebug'] == 'true' ) ? true : false ) : ( ! empty( $_REQUEST['debug'] ) && ( $_REQUEST['debug'] == 'true' ) ? true : false ),
				'skipdirs'            => $cli ? ( ! empty( $args['mcskipdirs'] ) ? $args['mcskipdirs'] : null ) : ( ! empty( $_REQUEST['skipdirs'] ) ? $_REQUEST['skipdirs'] : null ),
				'only_scan_dirs'      => $cli ? ( ! empty( $args['mcscanonlydirs'] ) ? $args['mcscanonlydirs'] : null ) : ( ! empty( $_REQUEST['wpmr_scan_only_dirs'] ) ? $_REQUEST['wpmr_scan_only_dirs'] : null ), // need to test cli
				'files'               => $cli ? ( ! empty( $args['mcfiles'] ) ? $args['mcfiles'] : null ) : ( ! empty( $_REQUEST['files'] ) ? $_REQUEST['files'] : null ),
				'regex'               => $cli ? ( ! empty( $args['mcregex'] ) ? $this->encode( $args['mcregex'] ) : null ) : ( ! empty( $_REQUEST['regex'] ) ? $this->encode( base64_decode( $_REQUEST['regex'] ) ) : false ),
				'wpmr_extra_db_query' => $cli ? ( ! empty( $args['mcdbquery'] ) ? $this->encode( $args['mcdbquery'] ) : null ) : ( ! empty( $_REQUEST['wpmr_extra_db_query'] ) ? $this->encode( base64_decode( $_REQUEST['wpmr_extra_db_query'] ) ) : false ),
				'wpmr_extra_db_regex' => $cli ? ( ! empty( $args['mcdbregex'] ) ? $this->encode( $args['mcdbregex'] ) : null ) : ( ! empty( $_REQUEST['wpmr_extra_db_regex'] ) ? $this->encode( base64_decode( $_REQUEST['wpmr_extra_db_regex'] ) ) : false ),
				'suspicious'          => $cli ? $args['mcsuspicious'] : ( ! empty( $_REQUEST['suspicious'] ) ? $this->mc_get_bool( $_REQUEST['suspicious'] ) : false ),
				'do_db_scan'          => $cli ? $args['do_db_scan'] : ( ! empty( $_REQUEST['do_db_scan'] ) ? $this->mc_get_bool( $_REQUEST['do_db_scan'] ) : false ),
				'do_file_scan'        => $cli ? $args['do_file_scan'] : ( ! empty( $_REQUEST['do_file_scan'] ) ? $this->mc_get_bool( $_REQUEST['do_file_scan'] ) : false ),
			)
		);

		return $GLOBALS['WPMR'];
	}

	function mc_get_bool( $var ) {
		return filter_var( $var, FILTER_VALIDATE_BOOLEAN );
	}

	/**
	 * Bootstraps the scan. Sets some globals and returns an object with files, dbscan results and title hack results
	 *
	 * @param array $args
	 * @return void
	 */
	function bootstrap( $args = array() ) {
		$this->set_args( $args );
		if ( ! empty( $GLOBALS['WPMR']['skipdirs'] ) ) {
			$skipdirs                    = array_map( 'trim', explode( ',', $GLOBALS['WPMR']['skipdirs'] ) );
			$GLOBALS['WPMR']['skipdirs'] = $skipdirs;
		} else {
			$GLOBALS['WPMR']['skipdirs'] = array();
		}

		if ( ! empty( $GLOBALS['WPMR']['only_scan_dirs'] ) ) {
			$only_scan_dirs                    = array_map( 'trim', explode( ',', $GLOBALS['WPMR']['only_scan_dirs'] ) );
			$only_scan_dirs                    = array_map( 'untrailingslashit', $only_scan_dirs );
			$only_scan_dirs                    = array_map( array( $this, 'unleadingslashit' ), $only_scan_dirs );
			$only_scan_dirs                    = array_map(
				function( $k ) {
					return untrailingslashit( get_home_path() ) . DIRECTORY_SEPARATOR . $k;
				},
				$only_scan_dirs
			);
			$GLOBALS['WPMR']['only_scan_dirs'] = $only_scan_dirs;
		} else {
			$GLOBALS['WPMR']['only_scan_dirs'] = array();
		}

		$files = $this->filter_files( $this->get_all_files() );
		$files = array_values( $files );
		sort( $files );

		$response = array(
			'files'     => $files,
			'timestamp' => $GLOBALS['WPMR']['timestamp'],
			'count'     => count( $files ),
			'debug'     => $_REQUEST,
			'checksums' => count( $this->get_checksums() ),
		);

		if ( ! empty( $_REQUEST['wpmr_init_nonce'] ) || $this->wpmr_iscli() ) {
			if ( ! $GLOBALS['WPMR']['do_file_scan'] ) {
				$response['files'] = array();
			}
			if ( $GLOBALS['WPMR']['do_db_scan'] ) {
				$response['db_scan'] = $this->db_scan();
			}
			$response['title_hack']      = (bool) $this->title_hack();
			$response['redirect_hijack'] = (bool) $this->redirect_hijack();
		}
		return $response;
	}

	function revise_checksums() {
		$cached_checksums = get_option( 'WPMR_checksums_cache' );
		if ( ! $cached_checksums || ! is_array( $cached_checksums ) ) {
			return;
		}

		foreach ( $cached_checksums as $file => $checksum ) {
			// echo $file . "\t" . $checksum . PHP_EOL;
			// continue;
			if ( ! file_exists( trailingslashit( get_home_path() ) . $file ) ) {
				// echo $file;
				unset( $cached_checksums[ $file ] );
			}
		}

		update_option( 'WPMR_checksums_cache', $cached_checksums );
	}

	function filter_files( $files ) {
		if ( ! empty( $GLOBALS['WPMR']['only_scan_dirs'] ) ) {

			// Always scan core
			$GLOBALS['WPMR']['only_scan_dirs'][] = trailingslashit( get_home_path() ) . 'wp-admin';
			$GLOBALS['WPMR']['only_scan_dirs'][] = trailingslashit( get_home_path() ) . 'wp-includes';

			foreach ( $files as $k => $file ) {
				if ( ! $this->path_begins_with_any( $file, $GLOBALS['WPMR']['only_scan_dirs'] ) ) {
					unset( $files[ $k ] );
				}
			}
		}
		return $files;
	}

	function path_begins_with_any( $path, $arr_dirs ) {
		foreach ( $arr_dirs as $dir ) {
			if ( $this->str_starts_with( $path, $dir ) ) {
				return 1;
			}
		}
	}

	function str_starts_with( $string, $startswith ) {
		return strpos( $string, $startswith ) === 0;
	}

	function redirect_hijack() {
		if ( 'page' == get_option( 'show_on_front' ) ) {
			$page_on_front  = get_option( 'page_on_front' );
			$page_for_posts = get_option( 'page_for_posts' );
			return ( ! empty( $page_on_front ) ? $this->check_redirect_hijack( get_permalink( $page_on_front ) ) : false ) || ( ! empty( $page_for_posts ) ? $this->check_redirect_hijack( get_permalink( $page_for_posts ) ) : false );
		} else {
			return $this->check_redirect_hijack( home_url() );
		}
	}

	function check_redirect_hijack( $url, $referer = 'https://www.google.com/' ) {
		$url = trailingslashit( $url );
		stream_context_set_default(
			array(
				'http' => array(
					'method'          => 'GET',
					'header'          => array( 'Referer: ' . $referer ),
					'user_agent'      => $_SERVER['HTTP_USER_AGENT'],
					'follow_location' => 0,
				),
			)
		);
		$headers = get_headers( $url, 1 );
		preg_match( '/\d\d\d/', $headers[0], $matches ); // extract the status code
		$status_code = $matches[0];
		if ( ( $status_code == 301 || $status_code == 302 ) && ! empty( $headers['Location'] ) ) {
			$r_host  = parse_url( $headers['Location'], PHP_URL_HOST );
			$wp_host = parse_url( $url, PHP_URL_HOST );
			if ( strpos( $wp_host, $r_host ) === false ) {
				return true; // redirecting to external domain
			}
		}
	}

	function title_hack() {
		if ( 'page' == get_option( 'show_on_front' ) ) {
			$page_for_posts = get_option( 'page_for_posts' );
			$page_on_front  = get_option( 'page_on_front' );
			return $this->check_page_hack( get_permalink( $page_for_posts ) ) || $this->check_page_hack( get_permalink( $page_on_front ) );
		} else {
			return $this->check_page_hack( home_url() );
		}
	}

	function check_page_hack( $url ) {
		$url = add_query_arg(
			array(
				uniqid() => uniqid( '', 1 ),
			// 'key2' => 'value2',
			),
			trailingslashit( $url )
		);
		if ( ! $content  = $this->get_remote_response( $url ) ) {
			return false;
		}
		if ( ! $content  = wp_remote_retrieve_body( $content ) ) {
			return false;
		}
		if ( empty( $content ) ) {
			return false;
		}
		libxml_use_internal_errors( true );
		$dom = new DOMDocument();
		$dom->loadHTML( $content );
		$content = $dom->getElementsByTagName( 'title' );
		foreach ( $content as $c ) {
			$strings[] = $c->nodeValue;
		}
		libxml_use_internal_errors( false );
		return $this->check_string_hack( $strings );
	}

	function check_string_hack( $strings = array() ) {
		$strings[] = get_bloginfo( 'name' );
		$strings[] = get_bloginfo( 'description' );
		// $strings[] = 'h@cked by';

		$regexes  = array( '/h[\@a]ck[3e]d.*by/is', '/[^<]*hack[3e][rd]/i' );
		$infected = false;

		foreach ( $strings as $str ) {
			foreach ( $regexes as $regex ) {
				if ( preg_match( $regex, $str ) ) {
					$infected = true;
				} else {
					// $this->llog( "no match for $regex in $str" );
				}
			}
		}
		return $infected;
	}

	function get_remote_response( $url ) {

		$response = wp_safe_remote_request( $url );

		if ( 200 != wp_remote_retrieve_response_code( $response ) ) {
			return;
		}
		if ( is_wp_error( $response ) ) {
			return;
		}

		return $response;
	}

	function get_all_files( $path = false ) {
		if ( ! $path ) {
			$path = get_home_path();
			if ( empty( $path ) ) {
				return array();
			}
			$path = untrailingslashit( $path );
		}
		$exempted = ! empty( $GLOBALS['WPMR']['skipdirs'] ) ? in_array( basename( $path ), $GLOBALS['WPMR']['skipdirs'] ) : false;

		if ( ( is_dir( $path ) && ! is_link( $path ) ) && ! $exempted && ( ! ( file_exists( $path . DIRECTORY_SEPARATOR . '.mcignore' ) ) || $path == untrailingslashit( get_home_path() ) ) ) {
			$children = @scandir( $path );
			if ( is_array( $children ) ) {
				$children = array_diff( $children, array( '..', '.' ) );
				$dirs     = array();
				$files    = array();
				foreach ( $children  as $child ) {
					$target = untrailingslashit( $path ) . DIRECTORY_SEPARATOR . $child;
					if ( is_dir( $target ) && ! is_link( $target ) ) {
						$elements = $this->get_all_files( $target );
						if ( $elements ) { // check for read/write errors
							foreach ( $elements as $element ) {
								$files[] = $element;
							}
						}
					}
					if ( is_file( $target ) && ! is_link( $target ) ) {
						$files[] = $target;
					}
				}
				return $files;
			}
		}
	}

	function db_scan() {
		global $wpdb;

		$scan_sqls   = array(
			'post'      => "SELECT ID AS id, post_content AS content, post_type as post_type FROM $wpdb->posts where post_content LIKE '%s'",
			'post_meta' => "SELECT post_id AS id, meta_value AS content FROM $wpdb->postmeta where meta_value LIKE '%s'",
			'option'    => "SELECT option_id AS id, option_value AS content FROM $wpdb->options WHERE option_value LIKE '%s'",
			'comment'   => "SELECT comment_ID AS id, comment_content AS content FROM $wpdb->comments WHERE comment_content LIKE '%s' AND comment_approved = '1'",
		);
		$definitions = $this->get_definitions()['definitions']['db'];
		$db_results  = array();
		$db_scan_log = array();
		if ( ! empty( $GLOBALS['WPMR']['wpmr_extra_db_query'] ) && ! empty( $GLOBALS['WPMR']['wpmr_extra_db_regex'] ) ) {
			$definitions['DWPMR'] = array(
				'severity'  => 'severe',
				'query'     => $GLOBALS['WPMR']['wpmr_extra_db_query'],
				'signature' => $GLOBALS['WPMR']['wpmr_extra_db_regex'],
			);
		};

		foreach ( $definitions as $ver => $details ) {
			foreach ( $scan_sqls as $key => $sql ) {
				$results = $wpdb->get_results( $wpdb->prepare( $sql, $this->decode( $details['query'] ) ), ARRAY_A );
				foreach ( $results as $result ) {
					$content     = $result['content'];
					$id          = sanitize_text_field( $result['id'] );
					$post_status = empty( $result['post_type'] ) ? '' : 'post-type &rarr; ' . $result['post_type'] . '.';
					$matches     = preg_match( $this->decode( $details['signature'] ), $content, $found );
					$pcre_err    = preg_last_error();
					if ( $pcre_err != 0 ) {
						continue;
					}
					if ( $matches >= 1 ) {
						if ( in_array( $details['severity'], array( 'severe', 'high' ) ) ) {
							$this->update_setting( 'infected', true );
						}

						$db_results[ $id ]  = $this->set_status( $details['severity'], 'Found database infection(s) in ' . ucwords( $key ) . " id $id. $post_status Threat Level &rarr; " . $details['severity'] . '.', $ver );
						$db_scan_log[ $id ] = array(
							'severity'  => $details['severity'],
							'infection' => $ver,
							'type'      => ucwords( $key ),
							'id'        => $id,
						);
					}
				}
			}
		}

		if ( $db_results ) {
			if ( ! empty( $db_scan_log ) && ! empty( $GLOBALS['WPMR']['timestamp'] ) ) {
				$record      = $GLOBALS['WPMR']['timestamp'];
				$db_scan_log = array( 'db' => $db_scan_log );
				$db_scan_log = json_encode( $db_scan_log );
				if ( $db_scan_log !== false ) {
					set_transient( "WPMR_log_$record", $db_scan_log, 30 * DAY_IN_SECONDS );
				}
			}
			return $db_results;
		}
		return $db_results;
	}

	function malcure_scanner_page() {
		$this->get_checksums();
		$this->get_definitions();
		$this->check_definitions();
		// $screen = get_current_screen();
		?>
		<div class="wrap">
			<h1 id="page_title">malCure Malware Scanner &amp; Firewall</h1>

			<p><input type="submit" value="Start Scan" id="scan_init" data-state="0" class="button-primary" /></p>
			
			<div id="poststuff">
				<div class="metabox-holder columns-2" id="post-body">
					<div class="postbox-container" id="post-body-content">
						<?php do_meta_boxes( 'malcure_page_malcure_scanner', 'main', null ); ?>
					</div>
					<!-- #postbox-container -->
					<div id="postbox-container-1" class="postbox-container">
						<?php
								do_meta_boxes( 'malcure_page_malcure_scanner', 'side', null );
						?>
					</div>
				</div>
			</div>
		</div>
		<script type="text/javascript">
		jQuery(document).ready(function($) { //wrapper
			$("#scan_init").click(function(e) { //event
				console.log('Heavens!');
				e.preventDefault();
				scan_id = Math.floor((new Date()).getTime() / 1000);

				regex = ( $('#wpmr_extra_reg').length && $('#wpmr_extra_reg').val().trim().length ) ? btoa($('#wpmr_extra_reg').val()): '';
				wpmr_extra_db_query = ( $('#wpmr_extra_db_query').length && $('#wpmr_extra_db_query').val().trim().length ) ? btoa($('#wpmr_extra_db_query').val()): '';
				wpmr_extra_db_regex = ( $('#wpmr_extra_db_regex').length && $('#wpmr_extra_db_regex').val().trim().length ) ? btoa($('#wpmr_extra_db_regex').val()): '';
				//if( $('#wpmr_extra_file').length && $('#wpmr_extra_file').val().trim().length ) {
				files = [$('#wpmr_extra_file').val()];
				
				do_db_scan = $('#do_db_scan').is(':checked');
				do_file_scan = $('#do_file_scan').is(':checked');
				show_suspicious = $('#show_suspicious').is(':checked');
				skipdirs = ( $('#skipdirs').length && $('#skipdirs').val().trim().length ) ? $('#skipdirs').val(): '';
				//}
				
				wpmr_scan_only_dirs = ( $('#wpmr_scan_only_dirs').length && $('#wpmr_scan_only_dirs').val().trim().length ) ? $('#wpmr_scan_only_dirs').val(): '';
				malcure_scan_init = {
						malcure_scan_init_nonce: '<?php echo wp_create_nonce( 'malcure_scan_init' ); ?>',
						action: "malcure_scan_init",
						cachebust: Math.floor((new Date()).getTime() / 1000),
						timestamp: scan_id,

						regex: regex,
						wpmr_extra_db_query: wpmr_extra_db_query,
						wpmr_extra_db_regex: wpmr_extra_db_regex,
						files: files,
						wpmr_scan_only_dirs: wpmr_scan_only_dirs,

						do_db_scan: do_db_scan,
						do_file_scan: do_file_scan,
						suspicious: show_suspicious,
						skipdirs: skipdirs,
					};
					$.ajax({
						url: ajaxurl,
						method: 'POST',
						data: malcure_scan_init,
						complete: function(jqXHR, textStatus) {
							if (textStatus == 'success') {  // ajax res received
								if( jqXHR.hasOwnProperty('responseJSON') &&  jqXHR.responseJSON.hasOwnProperty('success') && jqXHR.responseJSON.success ) {
									
								}
								else {
									
								}
							}
							else {  // no ajax response
								if( jqXHR.hasOwnProperty('responseJSON') && jqXHR.responseJSON.hasOwnProperty('data') && jqXHR.responseJSON.data.length ) {
									$('#update_response').html('Unknown failure.');
								}
							}
						},
						success: function(response) {
						} // initialize
					}); // ajax post
			});

			// close postboxes that should be closed
			$('.if-js-closed').removeClass('if-js-closed').addClass('closed');
			// postboxes setup
			//postboxes.add_postbox_toggles('malcure_page_malcure_scanner');
		});
		</script>
		<?php

	}

	function malcure_scan_options() {
		?>
		<p><input type="checkbox" name="do_db_scan" checked id="do_db_scan"/> <label for="do_db_scan">Scan Database</label></p>
		<p><input type="checkbox" name="do_file_scan" checked id="do_file_scan"/> <label for="do_file_scan">Scan Files</label></p>
		<p><input type="checkbox" name="show_suspicious" id="show_suspicious"/> <label for="show_suspicious">Paranoia-Mode: Scan binary files &amp; show suspicious matches too.</label></p>
		<p><strong>Force-skip the following directories:</strong></p>
		<p><input type="text" name="skipdirs" id="skipdirs" class="widefat" placeholder="wp-content,mu-plugins" /></p>
		<?php
	}

	function scan_init() {
		$start_time = microtime( true );
		if ( defined( 'WP_CLI' ) && WP_CLI ) {

		} else {
			check_ajax_referer( 'malcure_scan_init', 'malcure_scan_init_nonce' );
		}

		$this->reset_flog();
		$info     = $this->bootstrap();
		$files    = $this->get_all_files();
		$response = array();

		while ( count( $files ) ) {
			$arrbatch = array_splice( $files, 0, 100 );

			$result   = $this->scan_files_ajax( $arrbatch );
			$response = array_merge( $response, $result );

			// echo( json_encode( $response ) );
			echo count( $files ) . ' remaining' . PHP_EOL;
		}

		$end_time       = microtime( true );
		$execution_time = ( $end_time - $start_time );
		echo ' Execution time of script = ' . $execution_time . ' sec';

	}

	function scan_files_ajax( $files ) {
		$response = wp_remote_post(
			admin_url( 'admin-ajax.php' ),
			array(
				'blocking' => true,
				'body'     => array(
					'action'                  => 'wpmr_scan_files',
					'regex'                   => '',
					'timestamp'               => $_REQUEST['timestamp'],
					'suspicious'              => true,
					'files'                   => $files,
					'malcure_scan_init_nonce' => $_REQUEST['malcure_scan_init_nonce'],
				),
			)
		);
		// $response = wp_remote_retrieve_body( $response );
		return $response;
	}

	function wpmr_init_scan_cli() {
		// echo 'ola!';
		check_ajax_referer( 'wpmr_init_scan', 'wpmr_init_nonce' );
		$this->raise_limits_conditionally();
		// $this->llog($_REQUEST);
		wp_send_json( $this->bootstrap() );
	}

	function wpmr_scan_files_cli() {
		check_ajax_referer( 'wpmr_scan_files', 'wpmr_scan_files_nonce' );

		$this->wpmr_scan_files();
		// wp_send_json( $GLOBALS );
	}


	function wpmr_scan_files( $args = array() ) {
		$this->raise_limits_conditionally();
		$this->set_args( $args );

		$files       = $GLOBALS['WPMR']['files'];
		$tests       = array();
		$registered  = $this->is_registered();
		$definitions = $this->get_definitions()['definitions']['files'];
		if ( ! empty( $GLOBALS['WPMR']['regex'] ) ) {
			$definitions = array_merge(
				array(
					'DWPMR' => array(
						'severity'  => 'severe',
						'signature' => $GLOBALS['WPMR']['regex'],
						'class'     => 'scripting',
					),					
				), $definitions
			);
		};

		// $clean_files = array();

		$GLOBALS['WPMR']['definitions'] = $definitions;
		foreach ( $files as $file ) {
			if ( is_link( $file ) ) {
				continue;
			}
			$checksum_failure = $this->fails_checksum( $file );

			if ( $checksum_failure ) { // if file fails checksum
				$threat = $this->wpmr_scan_file_threats( $file );
				if ( $threat ) {
					$tests[ $file ] = $threat;
				} elseif ( ( $checksum_failure == 1 ) && ( ! $registered ) ) { // core file is modified || unknown file exists but we can't scan for severity since signatures are missing >> flag it as suspicious since
					$tests[ $file ] = array(
						'id'       => 'mismatch',
						'severity' => 'suspicious',
						'info'     => 'Mismatch',
					);
				} elseif ( $checksum_failure == 2 && ! $this->is_exempted_file( $file ) ) { // Unknown file inside wp-admin or wp-includes >> force flag as unknown
					$tests[ $file ] = array(
						'id'       => 'unknown',
						'severity' => 'suspicious',
						'info'     => 'Unknown',
					);
				} elseif ( $GLOBALS['WPMR']['debug'] ) { // finally force report status for clean files if debug is on
					// $tests[ $file ] = $this->set_status( 'clean', 'No Checksum ' . ( $threat ? ( '<br />Threat → ' . $threat ) : '' ), 'nochecksum' );
				}
			} else {
				if ( $GLOBALS['WPMR']['debug'] ) {
					// $tests[ $file ] = $this->set_status( 'clean', 'Checksum Match', 'match' );
				}
			}
		}

		// Unfiltered results are required to ascertain if the file qualifies for checksum-update.
		$this->optimize_checksums( array_diff( array_values( $files ), array_keys( $tests ) ) );

		$tests = $this->filter_results( $tests ); // remove results based on user-input

		if ( $tests ) {
			$log['files'] = $tests;
			if ( ! empty( $GLOBALS['WPMR']['timestamp'] ) ) {
				$record = get_transient( 'WPMR_log_' . $GLOBALS['WPMR']['timestamp'] );
				if ( $record ) {
					$log = array_merge_recursive( json_decode( $record, 1 ), $log );
				}
				$log = json_encode( $log );
				set_transient( 'WPMR_log_' . $GLOBALS['WPMR']['timestamp'], $log, 30 * DAY_IN_SECONDS );
			}
		}

		foreach ( $tests as $f => $report ) {
			$tests[ $f ] = $this->set_status( $report['severity'], $report['info'], $report['id'] );
		}

		$result = array(
			'report' => $tests,
			'memory' => ( memory_get_peak_usage( true ) / 1024 / 1024 ),
			'debug'  => $_REQUEST,
			// 'debug'  => empty( $definitions['DWPMR'] ) ? 'no extra def' : $definitions['DWPMR']['signature'],
		);

		if ( $this->wpmr_iscli() ) {
			return $result;
		} else {
			wp_send_json( $result );
		}
	}

	function filter_results( $files ) {

		foreach ( $files as $file => $val ) {
			if ( $val['severity'] == 'suspicious' && $val['id'] != 'unknown' && ! $GLOBALS['WPMR']['suspicious'] ) {
				unset( $files[ $file ] );
			}
		}

		return $files;
	}

	function optimize_checksums( $clean_files ) {

		$checksums     = $this->get_checksums();
		$install_path  = get_home_path();
		$new_checksums = array();

		foreach ( $clean_files as $file ) {
			$rel_path = str_replace( $install_path, '', $file );
			if ( empty( $checksums[ $rel_path ] ) ) {
				$new_checksums[ $rel_path ] = md5_file( $file );
			}
		}

		$cached_checksums = get_option( 'WPMR_checksums_cache' );

		if ( $cached_checksums && is_array( $cached_checksums ) && ! empty( $cached_checksums ) ) {
			update_option( 'WPMR_checksums_cache', array_merge( $cached_checksums, $new_checksums ) );
		} else {
			update_option( 'WPMR_checksums_cache', $new_checksums );
		}
	}

	function wpmr_checksum_cache( $checksums ) {
		if ( ! empty( $GLOBALS['WPMR']['debug'] ) ) { // This element doesn't exist on page load, only exists on ajax requests
			return $checksums;
		}
		$cached_checksums = get_option( 'WPMR_checksums_cache' );
		if ( $cached_checksums && is_array( $cached_checksums ) && ! empty( $cached_checksums ) ) {
			return array_merge( $checksums, $cached_checksums );
		}
		return $checksums;
	}

	function whitelist( $checksums ) {
		$whitelist = is_array( $this->get_setting( 'whitelist' ) ) ? $this->get_setting( 'whitelist' ) : array();
		if ( is_array( $whitelist ) && ! empty( $whitelist ) && $this->is_advanced_edition() ) {
			return array_merge( $checksums, $whitelist );
		}
		return $checksums;
	}

	// returns false else an array with severiy and signature id
	function wpmr_scan_file_threats( $file ) {

		if ( @filesize( $file ) > $this->maxsize ) { // 2megabytes
			return;
		}
		$ext = $this->get_fileext( $file );

		$tests = array();
		if ( ! is_readable( $file ) ) {
			return array(
				'id'       => 'unreadable',
				'severity' => 'skipped',
				'info'     => 'Error Reading File',
			);
		}
		if ( ! is_file( $file ) || ! ( $filesize = filesize( $file ) ) || ! ( $GLOBALS['WPMR']['tmp']['file_contents'] = @file_get_contents( $file ) ) ) {
			return;
		}
		if ( $GLOBALS['WPMR']['tmp']['file_contents'] === false ) {
			return array(
				'id'       => 'unreadable',
				'severity' => 'skipped',
				'info'     => 'Error Reading File',
			);
		}
		if ( empty( $GLOBALS['WPMR']['tmp']['file_contents'] ) ) {
			return; // 'Empty' ; // why care?
		}
		$definitions = $GLOBALS['WPMR']['definitions'];

		foreach ( $definitions as $definition => $signature ) {

			if ( $signature['class'] == 'htaccess' && $ext != 'htaccess' ) {
				continue;
			}

			// This will be filtered before returneing the results.
			// if ( $signature['severity'] == 'suspicious' && ! $GLOBALS['WPMR']['suspicious'] ) {
			// $this->llog($GLOBALS['WPMR']);
			// continue;
			// }

			$matches  = @preg_match( $this->decode( $signature['signature'] ), $GLOBALS['WPMR']['tmp']['file_contents'], $found );
			$pcre_err = preg_last_error();
			if ( $pcre_err != 0 ) {
				continue;
			}
			if ( $matches >= 1 ) {
				if ( in_array( $signature['severity'], array( 'severe', 'high' ) ) ) {
					$this->update_setting( 'infected', true );
				}
				return array(
					'id'       => $definition,
					'severity' => $signature['severity'],
					'info'     => $signature['severity'],
				);
			}
		}
	}

	/**
	 * Undocumented function
	 *
	 * @param [type]  $severity: severity
	 * @param [type]  $msg: test message
	 * @param boolean $attr: extra atributes for html
	 * @param string  $type: unused
	 * @param string  $sig: sig of the match
	 * @return void
	 */
	function set_status( $severity, $msg, $ver ) {
		$msg = strip_tags( $msg );
		if ( ! $this->wpmr_iscli() ) {
			return array(
				'severity'  => $severity,
				'message'   => $msg,
				'signature' => $ver,
			);
		} else {
			return array(
				'severity'  => $severity,
				'message'   => $msg,
				'signature' => $ver,
			);
		}
	}

	function is_exempted_file( $file ) {
		// exempt file from checksum?
		if ( strpos( $file, get_home_path() . 'wp-admin/' ) !== false || strpos( $file, get_home_path() . 'wp-includes/' ) !== false ) { // if the file is inside wp-admin
			return false;
		}
		return true;
	}

	/**
	 * Undocumented function
	 *
	 * @param [type] $local_file
	 * @return
	 * 1: Checksum mismatch: File exists in checksums and there is a definite mismatch
	 * 2: File isn't present in the checksums
	 * falsey: All well
	 */
	function fails_checksum( $local_file ) {
		if ( ! file_exists( $local_file ) ) {
			return;
		}
		if ( ! empty( $GLOBALS['WPMR']['regex'] ) ) {
			remove_filter( 'wpmr_checksums', array( $this, 'wpmr_checksum_cache' ) );
		}

		$checksums    = $this->get_checksums();
		$install_path = get_home_path();
		$file         = array();
		$match_path   = str_replace( $install_path, '', $local_file );

		if ( array_key_exists( $match_path, $checksums ) ) {
			if ( is_array( $checksums[ $match_path ] ) ) { // plugin readmes can have multiple md5 hashes since a readme.txt can be updated on svn without bumping the plugin version
				if ( ! in_array( md5_file( $local_file ), $checksums[ $match_path ] ) ) {
					return 1;
				} else {
					return;
				}
			} else {
				if ( $checksums[ $match_path ] != md5_file( $local_file ) ) {
					return 1;
				} else {
					return;
				}
			}
		} else {
			return 2; // we found a file that's not a part of WordPress
		}
	}

	function get_excluded() {
		return apply_filters(
			'wpmr_excluded_ext',
			array(
				'7z',
				'bmp',
				'bz2',
				'css',
				'doc',
				'docx',
				'exe',
				'fla',
				'flv',
				'gif',
				'gz',
				'ico',
				'jpeg',
				'jpg',
				'less',
				'mo',
				'mov',
				'mp3',
				'mp4',
				'pdf',
				'png',
				'po',
				'pot',
				'ppt',
				'pptx',
				'psd',
				'rar',
				'scss',
				'so',
				'svg',
				'tar',
				'tgz',
				'tif',
				'tiff',
				'ttf',
				'txt',
				'webp',
				'wmv',
				'z',
				'zip',
			)
		);
	}

	function get_fileext( $filename ) {
		$nameparts = explode( '.', ".$filename" );
		return strtolower( $nameparts[ ( count( $nameparts ) - 1 ) ] );
	}

	function reset_flog() {
		$date = date( 'Ymd-G:i:s' ); // 20171231-23:59:59
		$file = $this->dir . 'log.log';
		file_put_contents( $file, '', LOCK_EX );
	}

	function flog( $str ) {
		$date = date( 'Ymd-G:i:s' ); // 20171231-23:59:59
		$date = $date . '-' . microtime( true );
		$file = $this->dir . 'log.log';
		file_put_contents( $file, PHP_EOL . $date, FILE_APPEND | LOCK_EX );
		usleep( 1000 );
		$str = print_r( $str, true );
		file_put_contents( $file, PHP_EOL . $str, FILE_APPEND | LOCK_EX );
		usleep( 1000 );
	}

	// Deletes generated checksume. Should only be done if we have newer definitions available.
	function delete_generated_checksums() {
		delete_option( 'WPMR_checksums_cache' );
	}

	// Deletes core checksume. Should only be done if any WP updates are triggered.
	function delete_core_checksums() {
		delete_option( 'WPMR_checksums' );
	}

	function get_checksums( $cached = true ) {
		// $checksums = $cached ? get_transient( 'WPMR_checksums' ) : false;
		$this->revise_checksums();
		$checksums = get_option( 'WPMR_checksums' );
		if ( ! $checksums ) {
			global $wp_version;
			$checksums = get_core_checksums( $wp_version, get_locale() );
			if ( ! $checksums ) { // get_core_checksums failed
				$checksums = get_core_checksums( $wp_version, 'en_US' ); // try en_US locale
				if ( ! $checksums ) {
					$checksums = array(); // fallback to empty array
				}
			}
			$plugin_checksums = $this->get_plugin_checksums();
			if ( $plugin_checksums ) {
				$checksums = array_merge( $checksums, $plugin_checksums );
			}
			if ( $checksums ) {
				update_option( 'WPMR_checksums', $checksums );
				return apply_filters( 'wpmr_checksums', $checksums );
			}
			return apply_filters( 'wpmr_checksums', array() );
		} else {
			return apply_filters( 'wpmr_checksums', $checksums );
		}
	}

	function get_theme_checksums() {
		$all_themes      = wp_get_themes();
		$install_path    = get_home_path();
		$theme_checksums = array();
		$theme_root      = get_theme_root();
		foreach ( $all_themes as $key => $value ) {
			$theme_file   = trailingslashit( $theme_root ) . $key;
			$theme_file   = str_replace( $install_path, '', $theme_file );
			$checksum_url = 'https://downloads.wordpress.org/theme/' . $key . '/' . $value['Version'] . '.json';
		}
	}

	function get_plugin_checksums() {
		$missing          = array();
		$all_plugins      = get_plugins();
		$install_path     = get_home_path();
		$plugin_checksums = array();
		foreach ( $all_plugins as $key => $value ) {
			if ( false !== strpos( $key, '/' ) ) { // plugin has to be inside a directory. currently drop in plugins are not supported
				$plugin_file  = trailingslashit( dirname( $this->dir ) ) . $key;
				$plugin_file  = str_replace( $install_path, '', $plugin_file );
				$checksum_url = 'https://downloads.wordpress.org/plugin-checksums/' . dirname( $key ) . '/' . $value['Version'] . '.json';
				$checksum     = wp_safe_remote_get( $checksum_url );
				if ( is_wp_error( $checksum ) ) {
					continue;
				}

				if ( '200' != wp_remote_retrieve_response_code( $checksum ) ) {
					if ( '404' == wp_remote_retrieve_response_code( $checksum ) ) {
						$missing[ $key ] = array( 'Version' => $value['Version'] );
					}
					continue;
				}
				$checksum = wp_remote_retrieve_body( $checksum );
				$checksum = json_decode( $checksum, true );
				if ( ! is_null( $checksum ) && ! empty( $checksum['files'] ) ) {
					$checksum = $checksum['files'];
					foreach ( $checksum as $file => $checksums ) {
						$plugin_checksums[ trailingslashit( dirname( $plugin_file ) ) . $file ] = $checksums['md5'];
					}
				}
			} else {
			}
		}
		$extras = $this->get_pro_checksums( $missing );
		if ( $extras ) {
			$plugin_checksums = array_merge( $plugin_checksums, $extras );
		}
		return $plugin_checksums;
	}

	function get_pro_checksums( $missing ) {
		if ( empty( $missing ) ) {
			return;
		}
		if ( ! $this->is_registered() ) {
			return;
		}
		$state            = $this->get_setting( 'user' );
		$state            = $this->encode( $state );
		$all_plugins      = $missing;
		$install_path     = get_home_path();
		$plugin_checksums = array();
		foreach ( $all_plugins as $key => $value ) {
			if ( false !== strpos( $key, '/' ) ) { // plugin has to be inside a directory. currently drop in plugins are not supported
				$plugin_file  = trailingslashit( dirname( $this->dir ) ) . $key;
				$plugin_file  = str_replace( $install_path, '', $plugin_file );
				$checksum_url = WPMR_SERVER . '?wpmr_action=wpmr_checksum&slug=' . dirname( $key ) . '&version=' . $value['Version'] . '&type=plugin&state=' . $state;

				$checksum = wp_safe_remote_get( $checksum_url );
				if ( is_wp_error( $checksum ) ) {
					continue;
				}
				if ( '200' != wp_remote_retrieve_response_code( $checksum ) ) {
					continue;
				}
				$checksum = wp_remote_retrieve_body( $checksum );
				$checksum = json_decode( $checksum, true );
				if ( ! is_null( $checksum ) && ! empty( $checksum['files'] ) ) {
					$checksum = $checksum['files'];
					foreach ( $checksum as $file => $checksums ) {
						$plugin_checksums[ trailingslashit( dirname( $plugin_file ) ) . $file ] = $checksums['md5'];
					}
				}
			} else {
			}
		}
		return $plugin_checksums;
	}

	function read_error( $path ) {
		if ( ! file_exists( $path ) ) {
			return 'are you sure this file exists?: ' . $path;
		}
		if ( ! is_readable( $path ) ) {
			return 'are you sure this file is readable?:' . $path;
		}
		return ( is_array( $error ) && isset( $error['message'] ) ? preg_replace( '/[\r\n]/', ' ', print_r( $error['message'], 1 ) ) : 'readable?' );
	}

	function plugin_update_message( $data, $response ) {
		$changelog = 'https://plugins.trac.wordpress.org/browser/' . basename( $this->dir ) . '/trunk/readme.txt?format=txt&cachebust=' . time(); // should translate into https://plugins.trac.wordpress.org/browser/wp-malware-removal/trunk/readme.txt?format=txt since repo doesn't allow changing slugs
		$res       = wp_safe_remote_get( $changelog );
		if ( is_wp_error( $res ) ) {
			return;
		}
		$res    = wp_remote_retrieve_body( $res );
		$regexp = '~==\s*Changelog\s*==\s*=\s*[0-9.]+\s*=(.*)(=\s*' . preg_quote( $this->plugin_data['Version'] ) . '\s*=|$)~Uis';
		if ( ! preg_match( $regexp, $res, $matches ) ) {
			return;
		}
		$changelog      = (array) preg_split( '~[\r\n]+~', trim( $matches[1] ) );
		$upgrade_notice = '';
		foreach ( $changelog as $index => $line ) {
			if ( preg_match( '~^\s*\*\s*~', $line ) ) {
				$line            = preg_replace( '~^\s*\*\s*~', '', htmlspecialchars( $line ) );
				$upgrade_notice .= '<span style="font-weight:bold;">&#x2605;</span> ' . $line . '<br />';
			} else {
			}
		}
		$upgrade_notice = '<strong>Upgrading is a must to ensure that this plugin works with the latest signatures.</strong><br />' . $upgrade_notice;
		echo '<br /><br /><span style="display:block; border: 1px solid hsl(200, 100%, 80%); padding: 1em; background: hsl(200, 100%, 90%); line-height:2">' . $upgrade_notice . '</span>';
	}

	/* JS routine to handle user-events and reporting */
	function scripts() {
		$screen = get_current_screen();
		if ( $screen->id == 'toplevel_page_wpmr' ) {
			?>
		<script type="text/javascript">
			registered = <?php echo $this->is_registered() ? 1 : 0; ?>;
			wpmr_is_pro = <?php echo $this->is_advanced_edition() ? 1 : 0; ?>; 
			jQuery(document).ready(function($) { //wrapper
				$('#wpmr_results_box').addClass('closed');
				$('#wpmrdebug_box').addClass('closed');
				$('#wpmr_inspect_box').addClass('closed');
				$('#wpmr_diagnostics_box').addClass('closed');
				$("#wpmr_update").click(function(e) { //event
					e.preventDefault();
					wpmr_update = {
						wpmr_update_nonce: '<?php echo wp_create_nonce( 'wpmr_update_sigs' ); ?>',
						action: "wpmr_update_sigs",
						cachebust: Math.floor((new Date()).getTime() / 1000),
					};
					$.ajax({
						url: ajaxurl,
						method: 'POST',
						data: wpmr_update,
						complete: function(jqXHR, textStatus) {
							if (textStatus == 'success') {  // ajax res received
								if( jqXHR.hasOwnProperty('responseJSON') &&  jqXHR.responseJSON.hasOwnProperty('success') && jqXHR.responseJSON.success ) {
									$('#update_response').html('<span class="wpmr_notice_success"> Successfully updated definitions.</span>');
									$('.sig_count').html( jqXHR.responseJSON.data );
									$('#update_notice_p').remove();
									last_updated = new Date();
									$('#last_updated').html(last_updated);
									$('#update_response').fadeOut(10000);
									setTimeout(function(){
										if(confirm('Definitions have been updated. Reload the page now?')) {
											location.reload();
										}
									}, 1000);
								}
								else {
									if(jqXHR.hasOwnProperty('responseJSON') && jqXHR.responseJSON.hasOwnProperty('data') && jqXHR.responseJSON.data.length ) {
									$('#update_response').html('Failed. Reason: ' + jqXHR.responseJSON.data);
									}
								}
							}
							else {  // no ajax response
								if(jqXHR.hasOwnProperty('responseJSON') && jqXHR.responseJSON.hasOwnProperty('data') && jqXHR.responseJSON.data.length ) {
									$('#update_response').html('Unknown failure.');
								}
							}
						},
						success: function(response) {
						} // initialize
					}); // ajax post
				});

				$("#wpmr_reset").click(function(e) { //event
					e.preventDefault();
					if(!confirm("Whoa! This will delete plugin settings including definitions, checksums & registration data.\nAre you sure you want to proceed?\nClick cancel if not sure.")) {
						return false;
					}
					wpmr_reset = {
						wpmr_reset_nonce: '<?php echo wp_create_nonce( 'wpmr_reset' ); ?>',
						action: "wpmr_reset",
						cachebust: Date.now(),
					};
					$.ajax({
						url: ajaxurl,
						method: 'POST',
						data: wpmr_reset,
						complete: function(jqXHR, textStatus) {
							if (textStatus == 'success') {  // ajax res received
								if( jqXHR.hasOwnProperty('responseJSON') &&
								jqXHR.responseJSON.hasOwnProperty('success') ) {
									$('#update_response').html('<span class="wpmr_notice_success">Successfully reset plugin settings.</span>');
									$('#update_notice_p').remove();
									$('#update_response').fadeOut(10000);
									setTimeout(function(){
										if(confirm('Plugin has been reset. Reload the page now?')) {
											location.reload();
										}
									}, 1000);
								}
								else {
									if(jqXHR.hasOwnProperty('responseJSON') && jqXHR.responseJSON.hasOwnProperty('data') && jqXHR.responseJSON.data.length ) {
									$('#update_response').html('Failed.');
									}
								}
							}
							else {  // no ajax response
								$('#update_response').html('Unknown failure.');
							}
						},
						success: function(response) {
						} // initialize
					}); // ajax post
				});

				$('#wpmr_register_cancel').click(function(e){
					$('#wpmr_updates_box').removeClass('prompt_register');
				});

				$("#scan_control").click(function(e) { //event
					e.preventDefault();
					
					if(typeof(scanned) !== 'undefined') { // if this is not the first scan then warn before rescanning
						if(! confirm('This will clear the current results. Are you sure you want to continue?')) {
							return;
						}
					}
					scanned = true;
					do_db_scan = $('#do_db_scan').is(':checked');
					do_file_scan = $('#do_file_scan').is(':checked');
					skipdirs = ( $('#skipdirs').length && $('#skipdirs').val().trim().length ) ? $('#skipdirs').val(): '';
					show_suspicious = $('#show_suspicious').is(':checked');
					//console.log(do_db_scan);
					//console.log(do_file_scan);
					//console.log(  );
					//console.log( suspicious );
					full_scan = (do_db_scan && do_file_scan && (! $('#skipdirs').val().trim().length) );
					if(!do_db_scan && !do_file_scan) {
						joking = confirm("You've hit the easter egg!\nBoth db scan and file scan is unchecked.\nPretty sure you're joking right?");
						return false;
					}
					$('#wpmr_results_box').addClass('closed');
					$('#wpmrdebug_box').addClass('closed');
					$('#wpmr_inspect_box').addClass('closed');
					$('#wpmr_diagnostics_box').addClass('closed');
					//$('#hero_ctas').fadeTo(2000,1);
					$('#service_cta').html('');
					if( ! registered ) {
						msgnodef = window.confirm("A definition update is required to detect the latest malware.\n        Click OK to return and update the definitions (recommended).\n        Click Cancel to continue scanning without definitions (not recommended).");
						if(msgnodef) {
							return wpmr_prompt_register();
						}
					}
					window.onbeforeunload = function() {
						return true;
					};
					record = Math.floor((new Date()).getTime() / 1000);
					$('.gauge_c').css('transform', 'rotate( 0turn)');
					$('.gauge_c').addClass('rotating');
					$('#db_results').html('');
					$('#title_hack').html('');
					$('#redirect_hijack').html('');
					$('#file_results').html('');
					$('#percent').html('');
					$('#lcd').html('');
					$('.engine_status').toggleClass('blink');
					$('#logo').toggleClass('running');
					$('#percent').toggleClass('running');
					$('#percent').removeClass('suspicious');
					$('#percent').removeClass('severe');
					$('.engine_status').html('initialising…');
					total_files = 0;
					$("#scan_control").attr('disabled', 'disabled');
					$("#").attr('disabled', 'disabled');
					$("#wpmr_god").attr('disabled', 'disabled');
					regex = ( $('#wpmr_extra_reg').length && $('#wpmr_extra_reg').val().trim().length ) ? btoa($('#wpmr_extra_reg').val()): '';
					wpmr_extra_db_query = ( $('#wpmr_extra_db_query').length && $('#wpmr_extra_db_query').val().trim().length ) ? btoa($('#wpmr_extra_db_query').val()): '';
					wpmr_extra_db_regex = ( $('#wpmr_extra_db_regex').length && $('#wpmr_extra_db_regex').val().trim().length ) ? btoa($('#wpmr_extra_db_regex').val()): '';
					wpmr_scan_only_dirs = ( $('#wpmr_scan_only_dirs').length && $('#wpmr_scan_only_dirs').val().trim().length ) ? $('#wpmr_scan_only_dirs').val(): '';
					wpmr_init_scan = {
						wpmr_init_nonce: '<?php echo wp_create_nonce( 'wpmr_init_scan' ); ?>',
						action: "wpmr_init_scan",
						timestamp: record,
						regex: regex,
						wpmr_extra_db_query: wpmr_extra_db_query,
						wpmr_extra_db_regex: wpmr_extra_db_regex,
						cachebust: Date.now(),
						skipdirs: skipdirs,
						suspicious: show_suspicious,
						do_db_scan: do_db_scan,
						do_file_scan: do_file_scan,
						wpmr_scan_only_dirs: wpmr_scan_only_dirs
					};
					$.ajax({
						url: ajaxurl,
						method: 'POST',
						data: wpmr_init_scan,
						complete: function(jqXHR, textStatus) {},
						success: function(response) {
							db_result = response.hasOwnProperty('db_scan') ? Object.values(response.db_scan) : false;
							console.dir(response);
							title_hack = response.title_hack;
							redirect_hijack = response.redirect_hijack;
							found_anything = 0;
							found_files = 0;
							severe = false;
							suspicious = false;
							if ( db_result.length ) {
								found_anything = 1;
								dbhtml = '';
								Object.entries(db_result).forEach(([key,
									value
								]) => {
									//value = JSON.parse(value);
									//console.dir(value);
									//value = value.replace('<span', '<a target="_blank"' );
									//value = value.replace('</span>', '</a>' );
									//value = value.replace(/data\-attr\=.*?"(.*?)"/, 
									//	function (match,m1,offset,string){
									//		return 'href="<?php echo trailingslashit( MALCURE_API ) . 'webscan/sig/'; ?>' + m1 + '?utm_source=scanrun&utm_medium=web&utm_campaign=wpmr"';
									//		});
									//dbhtml += value;
									dbhtml += '<a target="_blank" class="threat '+value.severity+'" href="<?php echo trailingslashit( MALCURE_API ) . 'webscan/sig/'; ?>'+value.signature+'">'+value.message+'</a>';
								});
								$('#db_results').html( dbhtml );
								if( ! severe ) {
									severe = true;
									show_cta_severe();
								}
							} else {
								if(wpmr_init_scan.do_db_scan){
									$('#db_results').html( '<p style="grid-column: 1 / span 2;">Nothing Detected.</p>' );
								}
								else {
									$('#db_results').html( '<p style="grid-column: 1 / span 2;"><strong><em>Skipped database scan on request.</em></strong></p>' );
								}
							}
							if( title_hack ) {
								$('#title_hack').html( '<span class="threat severe">Site Title or Tagline hack detected! Your Search Engine Ranks will be adversely affected and even lead to blacklisting.</span>' );
								found_anything = 1;
								if( ! severe ) {
									severe = true;
									show_cta_severe();
								}
							}
							else {
								$('#title_hack').html( '<p>Nothing Detected.</p>' );
							}
							if( redirect_hijack ) {
								$('#redirect_hijack').html( '<span class="threat severe">Site redirect hijack deceted! Your Search Engine Ranks will be adversely affected and even lead to blacklisting.</span>' );
								found_anything = 1;
								if( ! severe ) {
									severe = true;
									show_cta_severe();
								}
							}
							else {
								$('#redirect_hijack').html( '<p>Nothing Detected.</p>' );
							}
							if( $('#wpmr_extra_file').length && $('#wpmr_extra_file').val().trim().length ) {
								files = [$('#wpmr_extra_file').val()];
								}
							else {
								files = response.files;
								}
							files = Object.values( files );
							$('.engine_status').html('initialized…');
							last = 0;
							results = [];
							old_time = Math.floor((new Date()).getTime() / 1000);
							results.starttime = old_time;
							results.totalfiles = files.length;
							$('.files_excluded').html( parseInt( $('.total_files').html() ) - files.length ) ;
							$('#files_to_scan').html(results.totalfiles);
							$('#checksum_count').html(response.checksums);
							results.memory = 0;
							results.infectedfiles = {};
							failed = [];
							iteration = 0;
							if ( files.length ) {
								$('.engine_status').html('scanning…');
								sent = Math.floor((new Date()).getTime() / 1000);
								scan_files();
								//setTimeout(scan_files, 500);
								$('#wpmr_results_box').removeClass('closed');
							}
							else {
								window.onbeforeunload = null;
								if( wpmr_init_scan.do_file_scan ){
									alert("There are no files to scan.\nBroken WordPress Install?");
								}
								else {
									$('#file_results').html('<p>Skipped file-scan on request.</p>');
									$('#wpmr_results_box').removeClass('closed');
									reset_ui();
								}
							}
							function scan_files() {
								batchsize = ( iteration == 0) ? $('#wpmr_batchsize').val(): batchsize;
								$('#wpmr_batchsize').attr('disabled', 'disabled');
								if (!files.length) {
									return;
								}
								wpmr_scan_files = {
									action: "wpmr_scan_files",
									regex: regex,
									timestamp: record,
									<?php
									if ( ! empty( $_REQUEST['debug'] ) ) {
										echo 'debug: true,' . PHP_EOL;
									}
									?>
									suspicious: document.getElementById('show_suspicious').checked,
									files: (files.length) ? ( files.length > batchsize ?  files.splice(0, batchsize) :  files ) : false,
								};
								lastbatch = wpmr_scan_files.files;
								siteroot = '<?php echo get_home_path(); ?>';
								//$('#file_scroll').html('../' + lastbatch[0].replace(siteroot, ''));
								lastbatch.forEach((element, index) => {
									setTimeout(function(){ $('#file_scroll').html('../' + element.replace(siteroot, '')); }, (index * 1000 / batchsize) );
								});
								$.ajax({
									url: ajaxurl,
									method: 'POST',
									data: wpmr_scan_files,
									success: function(scan_status) {},
									complete(jqXHR, textStatus) {
										if(jqXHR.hasOwnProperty('responseJSON') && jqXHR.responseJSON.hasOwnProperty('debug') & jqXHR.responseJSON.debug.length ){
											console.dir(jqXHR.responseJSON.debug);
										}
										var scan_status = {};
										if (textStatus == "success" && jqXHR.hasOwnProperty('responseJSON')) {
											scan_status = jqXHR.responseJSON.report;
										} else { // ajax failure
											console.group("%cAjax Batch Scan Failure → " + Math.floor((new Date()).getTime() / 1000),'text-transform:uppercase;font-weight:bold;color:#df2040;');
											console.table(lastbatch);
											console.groupEnd();
											Object.entries(lastbatch).forEach(([key,
												value
											]) => {
													//console.dir(key);
													//console.dir(value);
												if( iteration == 0 ){
													failed.push(value);
												}
												else {
													//scan_status[value] = '<span class="threat skipped" title="Server returned invalid information while scanning this file. Don\'t worry. You can always rescan.">Invalid Scan Response</span>';
													scan_status[value] = JSON.parse('{"severity" : "skipped","signature":"failure","message":"Invalid scan response"}'); 
												}
											}); 
										}
										new_time = Math.floor((new Date()).getTime() / 1000);
										old_time = Math.floor((new Date()).getTime() / 1000);
										html = '';   
										if (Object.keys(scan_status).length) {
											Object.entries(scan_status).forEach(([key,
												value
											]) => {
												results.infectedfiles[key] = value;
											});
											found_files = Object.keys(results.infectedfiles).length;
											found_anything = 1;
										}
										if ( found_files ) {
											html = '<table id="file_records"><tbody>';
										}
										if( found_anything || found_files ) {
											
										}
										Object.entries(results.infectedfiles).forEach(([key,
											value
										]) => {
											// value = JSON.parse(value);
											// console.dir(value);
											if( value.hasOwnProperty('severity') && value.severity.includes('severe') || value.severity.includes('high')) {
												if( ! severe) {
													severe = true;
												}
											}
											else {
												if( value.hasOwnProperty('severity') && value.severity.includes('suspicious') ) {
													if(! suspicious){
														suspicious = true;
													}
												}
											}
										
											//value = value.replace('<span', '<a target="_blank"' );
											//value = value.replace('</span>', '</a>' );
											//value = value.replace(/data\-attr\=.*?"(.*?)"/, 
											//	function (match,m1,offset,string){
											//		return 'href="<?php echo trailingslashit( MALCURE_API ) . 'webscan/sig/'; ?>' + m1 + '?utm_source=scanrun&utm_medium=web&utm_campaign=wpmr"';
											//	});
											if(wpmr_is_pro) {
												clean_tip = 'Delete this file from server?';
											}
											else {
												clean_tip = 'This feature is only available in paid version.';
											}
											//html += '<tr class="detected"><td class="inspect"><span class="inspect_file button button-primary" data-file="' + key + '">Cleanup</span></td><td class="level">' + value + '</td><td class="sig_details_wrap"></td><td class="infected_file"><pre class="recorded_file">' + key + '</pre></td></tr>';
											html += '<tr class="detected"><td class="inspect"><span class="inspect_file button button-primary" data-file="' + key + '">Click To Take Action</span></td><td class="level"><a target="_blank" class="threat '+value.severity+'" href="<?php echo trailingslashit( MALCURE_API ) . 'webscan/sig/'; ?>' + value.signature + '?utm_source=scanrun&utm_medium=web&utm_campaign=wpmr' + value.severity + '">'+value.message+'</a></td><td class="sig_details_wrap"></td><td class="infected_file"><pre class="recorded_file">' + key + '</pre></td></tr>';
										});
										if (suspicious && ! severe){
											show_cta_suspicious();
										}
										else {
											if( severe ) {
												show_cta_severe();
											}
										}
										if (found_files) {
											html += '</tbody></table>';
										} else {
											html = '<p id="file_scan_blink" class="blink">Nothing yet&hellip;</p>';
										}
										$('#file_results').html(html);
										results.filesremaining = files.length
										if (textStatus == "success" && jqXHR.hasOwnProperty('responseJSON') && jqXHR.responseJSON.hasOwnProperty('memory') && jqXHR.responseJSON.memory > results.memory) {
											results.memory = jqXHR.responseJSON.memory;
										}
										results.scanspeed = (results.totalfiles - results.filesremaining) / ((Math.floor((new Date()).getTime() / 1000) - results.starttime));
										$('#percent').fadeTo(2000, 1);
										$('#lcd').html('<span class="stats"><div class="speed"><span class="digits">' +(results.scanspeed).toFixed(0) +'</span><span class="rate">&nbsp;files / sec</span></div><div id="ram">' +parseFloat(results.memory).toFixed(0) +'mb ram</div>').fadeTo(2000, 1);
										$('#files_remaining').html(results.filesremaining);
										results.timeelapsed = (Math.floor((new Date()).getTime() / 1000) - results.starttime);
										$('#time_elapsed').html(msToTime(results.timeelapsed * 1000));
										$('#scan_speed').html((results.scanspeed).toFixed(0) + ' files / sec.');
										results.timeremaining = results.filesremaining / results.scanspeed;
										$('#time_remaining').html(msToTime(results.timeremaining * 1000));
										percent = ((results.totalfiles - results.filesremaining) / results.totalfiles) * 100;
										$('#percent').html('<span class="percentage">' + parseFloat(percent).toFixed(0) + '%</span><br /><div id="time_counter">' + msToTime(results.timeelapsed * 1000) + '</div>');
										$('.gauge_c').css('transform', 'rotate( ' + (.005 * percent) + 'turn)');
										if (last != 1) {
											if (files.length <= batchsize) {
												last = 1;
											}
											sent = Math.floor((new Date()).getTime() / 1000);
											//setTimeout(scan_files, 500);
											scan_files();
										}
										else { // this is the last batch
											iteration++;
											//console.warn('Phase 1 Complete…');
											if( failed.length && iteration == 1 ){
												files = failed;
												last = 0;
												failed = [];
												batchsize = 1;
												console.error("%cFiles Failed Due to Ajax Error → %i",'text-transform:uppercase;font-weight:bold;color:#df2040;',files.length);
												console.group('Phase 2');
												console.table(files);
												console.groupEnd();
												console.warn('Initiating partial rescan due to previous failures…');
												$('.engine_status').html('re-scanning…');
												//setTimeout(scan_files, 500);
												scan_files();
											}
											else {
												//reset_ui();
												//setTimeout(reset_ui, 500);
												reset_ui();
											}
										}
									},
									error: function(jqXHR, textStatus, errorThrown) {}
								});
							}
							// EO fn scan_files
						}, // initialize
					}); // ajax post
				}); //click
				
				function file_inspect_handler(event){
					event.preventDefault();
					file = $(this).attr('data-file');
					if ( file ) {
						wpmr_inspect_file = {
							wpmr_inspect_nonce: '<?php echo wp_create_nonce( 'wpmr_inspect_file' ); ?>',
							action: "wpmr_inspect_file",
							file: btoa(file)
						};
						$.ajax({
							url: ajaxurl,
							method: 'GET',
							data: wpmr_inspect_file,
							complete: function(jqXHR, textStatus) {
								$('#wpmr_inspect_box').removeClass('closed');
								$('#inspect_file_path').html('<strong>File:</strong> <code>' + file + '</code>');
								
								if (textStatus == 'success') {
									if (jqXHR.hasOwnProperty('responseJSON')) { // proper json will have success and data vars.
										$('#inspect_file').val(jqXHR.responseJSON.data);
										$('#inspect_file').attr('data-file',file);
									}
									else {
										$('#inspect_file').val('Invalid response from server!');
									}
								}
								else { // ajax failed
									$('#inspect_file').val('Request failed!');
								}

								$('html,body').animate({
									scrollTop: $('#wpmr_inspect_box').offset().top
								}, 'slow');
							},
						});
					}
				}
				
				$('.inspect_file_debug').blur(file_inspect_handler);

				$("#wpmr_copy").click(function(){
					try{
						let range = document.createRange();
						let selection = window.getSelection();
						let node = document.getElementById('results_wrap');
						range.selectNodeContents(node);
						selection.removeAllRanges();
						selection.addRange(range);
						document.execCommand("copy");
						selection.removeAllRanges();
						$('#copied_check').fadeTo(1000,0).fadeTo(1000,1);
					}
					catch(e) {
					}
				});

				$('#file_results').on('click', '.inspect_file',  file_inspect_handler);

				$('#wpmr_cleanup').click(function(event) {
					if(! wpmr_is_pro) {
						alert('This feature is only available in malCure Advanced Edition.');
						return;
					}
					file = $('#inspect_file').attr('data-file');
					if( ! file ) {
						$('#file_op_status').html('No file selected.'); // update the status message
						return;
					}
					if( ! confirm("\nAre you sure you have backed-up this file and want to attempt to repair it?\n\n" + file + "\n") ) {
						return;
					}
					$('#file_op_status').html('');
					event.preventDefault();
					var element = this;

					wpmr_clean_file = {
						wpmr_clean_nonce: '<?php echo wp_create_nonce( 'wpmr_clean_file' ); ?>',
						action: "wpmr_clean_file",
						file: btoa(file),
						cachebust: Math.floor((new Date()).getTime() / 1000),
					};
					$.ajax({
						url: ajaxurl,
						method: 'GET',
						data: wpmr_clean_file,
						complete: function(jqXHR, textStatus) {
							document.getElementById('file_op_status').scrollIntoView({behavior: "smooth", block: "center", inline: "center"});
							setTimeout(flash_file_op, 500);
							if (textStatus == 'success') {
								if (jqXHR.hasOwnProperty('responseJSON')) {
									if (jqXHR.responseJSON.success) {
										$('#inspect_file').val(jqXHR.responseJSON.data); // update the file inspector contents
										$('#file_op_status').html('File repair succeeded on ' + file); // update the status message
										$('.inspect_file[data-file="'+file+'"]').closest('tr.detected').fadeOut( 1000, function(){$(this).remove();}); // remove the file from the infection results.
										$('#inspect_file').attr('data-file','');
									} else {
										$('#file_op_status').html(jqXHR.responseJSON.data);
									}
								} else {
									$('#file_op_status').html('Invalid response from server!');
								}
							} else {
								$('#file_op_status').html('Request failed!');
							}
						},
					});
				
				});

				$('#wpmr_delete').click(function(event) {
					if(! wpmr_is_pro) {
						alert('This feature is only available in malCure Advanced Edition.');
						return;
					}
					file = $('#inspect_file').attr('data-file');
					if( ! file ) {
						$('#file_op_status').html('No file selected.'); // update the status message
						return;
					}
					
					if( ! confirm("\nAre you sure you have backed-up this file and want to delete it?\n\n" + file + "\n") ) {
						return;
					}
					$('#file_op_status').html('');
					event.preventDefault();
					var element = this;
					
					wpmr_delete_file = {
						wpmr_delete_nonce: '<?php echo wp_create_nonce( 'wpmr_delete_file' ); ?>',
						action: "wpmr_delete_file",
						file: btoa(file),
						cachebust: Math.floor((new Date()).getTime() / 1000),
					};
					$.ajax({
						url: ajaxurl,
						method: 'GET',
						data: wpmr_delete_file,
						complete: function(jqXHR, textStatus) {
							document.getElementById('file_op_status').scrollIntoView();
							setTimeout(flash_file_op, 500);
							if (textStatus == 'success') {
								if (jqXHR.hasOwnProperty('responseJSON')) {
									if (jqXHR.responseJSON.success) {
										$('#inspect_file').val(''); // clear the file inspector contents
										$('#file_op_status').html(jqXHR.responseJSON.data); // update the UI about response status
										$('.inspect_file[data-file="'+file+'"]').closest('tr.detected').fadeOut( 1000, function(){$(this).remove();}); // remove the file from infected results
										$('#inspect_file').attr('data-file','');
									} else {
										$('#file_op_status').html(jqXHR.responseJSON.data);
									}
								} else {
									$('#file_op_status').html('Invalid response from server!');
								}
							} else {
								$('#file_op_status').html('Request failed!');
							}
						},
					});
					
				});

				$('#wpmr_file_whitelist').click(function(event) {
					if(! wpmr_is_pro) {
						alert('This feature is only available in malCure Advanced Edition.');
						return;
					}
					file_path = $('#inspect_file').attr('data-file');
					real_path = file_path;
					if( ! file_path ) {
						$('#file_op_status').html('No file selected.'); // update the status message
						return;
					}
					
					if( ! confirm("\nAre you sure you want to whitelist this file?\n\n" + file_path + "\n") ) {
						return;
					}
					$('#file_op_status').html('');
					event.preventDefault();
					var element = this;
					
					wpmr_whitelist_file = {
						wpmr_whitelist_nonce: '<?php echo wp_create_nonce( 'wpmr_whitelist_file' ); ?>',
						action: "wpmr_whitelist_file",
						file: btoa(file_path),
						cachebust: Math.floor((new Date()).getTime() / 1000),
					};
					$.ajax({
						url: ajaxurl,
						method: 'GET',
						data: wpmr_whitelist_file,
						complete: function(jqXHR, textStatus) {
							document.getElementById('file_op_status').scrollIntoView();
							setTimeout(flash_file_op, 500);
							if (textStatus == 'success') {
								if (jqXHR.hasOwnProperty('responseJSON')) {
									if (jqXHR.responseJSON.success) {
										$('#inspect_file').val(''); // clear the file inspector contents
										$('#file_op_status').html(jqXHR.responseJSON.data); // update the UI about response status
										$('.inspect_file[data-file="'+file_path+'"]').closest('tr.detected').fadeOut( 1000, function(){$(this).remove();}); // remove the file from infected results
										$('#inspect_file').attr('data-file','');
										file_path = file_path.replace('<?php echo ABSPATH; ?>','');
										$('#whitelist').append('<p data-file-wrap="' + file_path + '"><span data-file="' + file_path + '" class="dashicons dashicons-dismiss remove-from-whitelist"></span>' + real_path + '</p>');
										handle_whitelist_labels();
									} else {
										$('#file_op_status').html(jqXHR.responseJSON.data);
									}
								} else {
									$('#file_op_status').html('Invalid response from server!');
								}
							} else {
								$('#file_op_status').html('Request failed!');
							}
						},
					});
					
				});

				$('#whitelist').on('click','.remove-from-whitelist', function(event) {
					file = $(this).attr('data-file');
					$(this).addClass('mc-waiting');
					wpmr_unwhitelist_file = {
						wpmr_unwhitelist_nonce: '<?php echo wp_create_nonce( 'wpmr_unwhitelist_file' ); ?>',
						action: "wpmr_unwhitelist_file",
						file: btoa(file),
						cachebust: Math.floor((new Date()).getTime() / 1000),
					};
					
					$.ajax({
						url: ajaxurl,
						method: 'GET',
						data: wpmr_unwhitelist_file,
						complete: function(jqXHR, textStatus) {
							
							if (textStatus == 'success') {
								if (jqXHR.hasOwnProperty('responseJSON')) {
									if (jqXHR.responseJSON.success) {
										$( "[data-file-wrap='"+ file + "']" ).remove();
										handle_whitelist_labels();
									} else {
										alert(jqXHR.responseJSON.data); // alert the error message
									}
								} else {
									alert('Invalid response from server!');
								}
							} else {
								alert('Request failed!');
							}
						},
					});
				});
				
				function handle_whitelist_labels(){
					whitelist = $('#whitelist [data-file]');
					if(whitelist.length) {
						$('#whitelist-present-placeholder').show();
						$('#whitelist-absent-placeholder').hide();
					}
					else {
						$('#whitelist-present-placeholder').hide();
						$('#whitelist-absent-placeholder').show();
					}
				}

				function flash_file_op(){
					$('#file_op_status').fadeOut(500).fadeIn(500).fadeOut(500).fadeIn(500).fadeOut(500).fadeIn(500);
				}

				function highlight_results(){
					setTimeout( function(){
						$('html,body').animate({
							scrollTop: $('#wpmr_cta_wrap').offset().top - 200
						}, 'slow');
					}, 1000);
				}

				function show_cta_severe(){
					$('#wpmr_cta_wrap').show();
					if( $('#cta_severe').length == 0 ) {
						$('#percent').addClass('severe');
						$('#service_cta').html('<div id="cta_severe"><h3 class="mc_center heading"><span class="brandname">malCure</span> Detected Severe Infections</h3><p class="mc_center"><a class="button-primary" href="https://www.malcure.com/?p=107&utm_source=ctaseverecleanup&utm_medium=web&utm_campaign=wpmr" target="_blank" rel="noopener noreferrer">Request Malware Cleanup &rarr;</a></p></div>');
						//$('#service_cta').html('<div id="cta_severe"><h3 class="mc_center heading">Malware Found &mdash; Severe Infection Detected!</h3><p class="mc_center" style="width: 80%;margin-left: auto;margin-right: auto;"><span class="brandname">malCure</span> detected severe infection(s). Clean your site before it starts affecting your business. Put your website in maintenance mode and follow this <a href="https://www.malcure.com/?p=1540&utm_source=ctasevereeasyguide&utm_medium=web&utm_campaign=wpmr" target="_blank">step-by-step guide for malware removal</a>. Please file a malware support ticket if you want us to jump in.</p><p class="mc_center" style="width: 80%;margin-left: auto;margin-right: auto;font-weight: 500;">100% Removal Guarantee • Same Day Service • 30 Days Cover</p><p class="mc_center"><a class="button-primary" href="https://www.malcure.com/?p=107&utm_source=ctaseverecleanup&utm_medium=web&utm_campaign=wpmr" target="_blank" rel="noopener noreferrer">File Malware Support Ticket &rarr;</a></p></div>');
						highlight_results();
					}
				}

				function show_cta_suspicious(){
					$('#wpmr_cta_wrap').show();
					if( $('#cta_suspicious').length == 0 ) {
						$('#percent').addClass('suspicious');
						$('#service_cta').html('<div id="cta_suspicious"><h3 class="mc_center heading"><span class="brandname">malCure</span> Detected Suspicious Files</h3><p class="mc_center"><a class="button-primary" href="https://www.malcure.com/?p=107&utm_source=ctasuspiciouscleanup&utm_medium=web&utm_campaign=wpmr" target="_blank" rel="noopener noreferrer">Get Help With Malware Cleanup &rarr;</a></p></div>');
						//$('#service_cta').html('<div id="cta_suspicious"><h3 class="mc_center heading">Suspicious Files Found!</h3><p class="mc_center" style="width: 80%;margin-left: auto;margin-right: auto;"><span class="brandname">malCure</span> detected suspicious infection(s). Clean your site before it starts affecting your business. Put your website in maintenance mode and follow this <a href="https://www.malcure.com/?p=1540&utm_source=ctasuspiciouseasyguide&utm_medium=web&utm_campaign=wpmr" target="_blank">step-by-step guide for malware removal</a>. Please file a malware support ticket if you want us to jump in.</p><p class="mc_center" style="width: 80%;margin-left: auto;margin-right: auto;font-weight: 500;">100% Removal Guarantee • Same Day Service • 30 Days Cover</p><p class="mc_center"><a class="button-primary" href="https://www.malcure.com/?p=107&utm_source=ctasuspiciouscleanup&utm_medium=web&utm_campaign=wpmr" target="_blank" rel="noopener noreferrer">File Malware Support Ticket &rarr;</a></p></div>');
						highlight_results();
					}
				}

				function is_full_scan(){
					return full_scan;
				}
				
				function show_cta_voila(){
					$('#wpmr_cta_wrap').show();
					if( $('#cta_logo_contribute').length == 0 ) {
						msgvoila = '';
						msg = '';
						if( ! is_full_scan() ) {
							msgvoila = 'You selected to skip some scans. Unable to detect.';
							clsvoila = 'unclear';
							msg = '<p>malCure couldn\'t detect malware.</p><p><strong>Please do a complete scan.</strong></p>';
						}
						else {
							msgvoila = 'No Malware Found!';
							clsvoila = 'clear';
							msg = '<p>Congratulations! <strong>malCure</strong> didn\'t detect any malware.</p><p><strong>Love this plugin?</strong></p><p><a class="cta_btn" target="_blank" href="https://wordpress.org/support/plugin/wp-malware-removal/reviews/">Give Us A Rating&nbsp;&rarr;<span class="emoji">⭐⭐⭐⭐⭐</span></a></p>';
						}
						//$('#service_cta').html('<table class="tbl_cta" id="cta_logo_contribute"><tr><td class="td_first"><a href="https://www.converticacommerce.com?item_name=Donation%20for%20malCure%20Malware%20Scanner&cmd=_xclick&currency_code=USD&business=shivanand@converticacommerce.com"><img id="img_logo_contribute" alt="Click here to donate to the plugin authors" title="Click here to donate to the plugin authors" src="'+<?php echo "'" . WPMR_PLUGIN_DIR_URL . "'"; ?>+'assets/cta-logo-contribute.svg" /></a></td><td class="td_second"><h3 class="site_status '+clsvoila+'">'+msgvoila+'</h3>' + msg + '</td></tr></table>');
						d = new Date().toUTCString();
						v = '<div id="cta_logo_contribute"><h1 class="premium" style="font-weight:bold;color:hsl(120, 50%, 40%);">Your WordPress Site is Clean</h1><h2 style="font-weight: 500;color: hsl(0deg 0% 100%);font-variant: small-caps;background: hsl(120, 50%, 40%);display: table;width: auto;margin: 10px auto;padding: 4px 8px;">Scanned On: '+d+'</h2><h1 style="font-weight: 400;font-size: 1.618em;">Share some love!</h1><h2><span class="brandname">malCure</span> is Premium Security for Free!</h2><div class="has-2-columns love"><div class="column aligncenter"><p>Support Development</p><p><a class="cta_btn" target="_blank" href="https://www.converticacommerce.com?item_name=Donation%20for%20malCure%20Malware%20Scanner&amp;cmd=_xclick&amp;currency_code=USD&ampbusiness=shivanand@converticacommerce.com">Donate&nbsp;→</a></p></div><div class="column aligncenter"><p>Or take a moment and…</p><p><a class="cta_btn" target="_blank" href="https://wordpress.org/support/plugin/wp-malware-removal/reviews/#new-post"><span class="rating">⭐⭐⭐⭐⭐</span> Rate this plugin&nbsp;→</a></p></div></div></div>';
						$('#service_cta').html(v);
						highlight_results();
					}
				}

				function clear_infection_stats(){
					if( ! is_full_scan() ) {
						return;
					}
					wpmr_clear_infection_stats = {
						wpmr_clear_infection_stats_nonce: '<?php echo wp_create_nonce( 'wpmr_clear_infection_stats' ); ?>',
						action: "wpmr_clear_infection_stats",
					}
					$.ajax({
						url: ajaxurl,
						method: 'POST',
						data: wpmr_clear_infection_stats,
						complete: function(jqXHR, textStatus) {
							if (textStatus == 'success') {
								if (jqXHR.hasOwnProperty('responseJSON')) {
									if (jqXHR.responseJSON.hasOwnProperty('content') && jqXHR.responseJSON.content.length) {
										console.log('cleared');
									} else {
										if (jqXHR.responseJSON.hasOwnProperty('error')) {
											console.log('jqXHR.responseJSON.error');
										}
									}
								} else {
									console.log('Invalid response from server');
								}
							} else {
									console.log('Request failed.');
							}
						},
					});
				}

				function reset_ui(){
					$('#files_remaining').html('0');
					$('.gauge_c').removeClass('rotating');
					$('#logo').removeClass('running');
					$('#percent').removeClass('running');
					$('.engine_status').removeClass('blink');
					$('.engine_status').html('complete');
					$('#time_remaining').html('finished');
					$('#scan_speed').html('done');
					$('#files_to_scan').html('none');
					setTimeout(async function(){$('#file_scroll').html('');},1);
					percent = 100;
					if( ! results.hasOwnProperty('timeelapsed')) {
						results.timeelapsed = 0;
					}
					$('#percent').html('<span class="percentage">' + parseFloat(percent).toFixed(0) + '%</span><div id="time_counter">' + msToTime(results.timeelapsed) + '</div>');
					$('.gauge_c').css('transform', 'rotate( ' + (.005 * percent) + 'turn)');
					
					if( ( ! suspicious && ! severe) ) {
						//$('#file_results').html('<p>Nothing Detected.</p>');
						//$('#file_results .blink').html('<p>Nothing Detected.</p>');
						show_cta_voila();
					}
					else {
						highlight_results();
					}
					if( ! severe ) {
						clear_infection_stats();
					}
					$('#file_results .blink').removeClass('blink');
					if(! $('#file_records').length ){
						$('#file_results').html('<p>Nothing Detected.</p>');
					}
					$("#scan_control").val('Re-Scan');
					$("#scan_control").removeAttr('disabled');
					$('#wpmr_batchsize').removeAttr('disabled');
					$("#wpmr_god").removeAttr('disabled');
					//window.onbeforeunload = null;
				}

				function wpmr_js_arr_encode($str){
					return $str;
				}

				function wpmr_prompt_register(){
					$('#wpmr_updates_box').addClass('prompt_register');
					fix_blur();
				}

				handle_whitelist_labels();
			}); //ready

			function msToTime(duration) {
				//if (msToTime.caller == null) {
				//	console.log(  'The function was called from the top!');
				//} else {
				//	console.log( 'This function\'s caller was ' + msToTime.caller);
				//}

				//console.log('mstotime:' + duration);
				//var milliseconds = parseInt((duration % 1000) / 100),
				seconds = Math.floor((duration / 1000) % 60),
				minutes = Math.floor((duration / (1000 * 60)) % 60),
				hours = Math.floor((duration / (1000 * 60 * 60)) % 24);
				hours = (hours < 10) ? "0" + hours : hours;
				minutes = (minutes < 10) ? "0" + minutes : minutes;
				seconds = (seconds < 10) ? "0" + seconds : seconds;
				if (parseInt(hours)) {
					ret = hours + ":" + minutes + ":" + seconds;
					//console.log(ret);
					return ret;
				} else {
					ret =  minutes + ":" + seconds;
					//console.log(ret);
					return ret;
				}
				
				return hours + ":" + minutes + ":" + seconds + "." + milliseconds;
			}

			function millisToMinutesAndSeconds(millis) {
				var minutes = Math.floor(millis / 60000);
				var seconds = ((millis % 60000) / 1000).toFixed(0);
				return minutes + ":" + (seconds < 10 ? '0' : '') + seconds;
			}
		</script> 
			<?php
		}
	}


	function wpmr_inspect_file() {
		check_ajax_referer( 'wpmr_inspect_file', 'wpmr_inspect_nonce' );
		$this->raise_limits_conditionally();
		$result = $this->fetch_file_contents( base64_decode( $_REQUEST['file'] ) );
		if ( ! is_wp_error( $result ) ) {
			wp_send_json_success( $result );
		} else {
			wp_send_json_error( $result->get_error_message() );
		}
	}

	function fetch_file_contents( $file ) {
		if ( is_file( $file ) && is_readable( $file ) && ( ! filesize( $file ) <= 0 ) && filesize( $file ) <= $this->maxsize ) { // file checks passed
			$content = file_get_contents( $file );
			if ( $content !== false ) { // file_get_contents succeeded
				// $content = htmlspecialchars( $content, ENT_SUBSTITUTE );
				if ( ! $content ) { // non-printable chars
					return new WP_Error( 'unprintable_chars', __( 'File contains non-printable characters.' ) );
				} // non-printable chars
				return $content;
			} // file_get_contents succeeded
			else { // file_get_contents failed
				return new WP_Error( 'file_read_failure', __( 'Error getting file contents.' ) );
			} // file_get_contents failed
		} // file checks passed
		else { // file checks failed
			return new WP_Error( 'file_unhandled', __( 'Empty or inaccessible or too large a file.' ) );
		} // file checks failed
	}

	/**
	 * Repair file: replace the file with a fresh version from svn
	 *
	 * @return json
	 */
	function wpmr_clean_file() {
		check_ajax_referer( 'wpmr_clean_file', 'wpmr_clean_nonce' );

		if ( ! $this->is_advanced_edition() ) {
			wp_send_json_error( 'Please update to malCure Advanced Edition to use this feature.' );
		}

		WP_Filesystem();

		$file = base64_decode( $_REQUEST['file'] );

		if ( ! file_exists( $file ) ) {
			wp_send_json_error( 'File doesn\'t exist. File: ' . $file );
		}

		$is_repairable = $this->is_repairable( $file );

		if ( $is_repairable ) {
			$result = $this->repair_file( $file );
		} else {
			$result = new WP_Error( 'cleanup_failed', __( 'File is not rapairable. Please cleanup manually. File: ' . $file ) );
		}

		if ( is_wp_error( $result ) ) {
			wp_send_json_error( $result->get_error_message() );
		} else {
			wp_send_json_success( $this->fetch_file_contents( $file ) );
		}
	}

	function wpmr_unwhitelist_file() {
		check_ajax_referer( 'wpmr_unwhitelist_file', 'wpmr_unwhitelist_nonce' );

		if ( ! $this->is_advanced_edition() ) {
			wp_send_json_error( 'Please update to malCure Advanced Edition to use this feature.' );
		}

		$file = base64_decode( $_REQUEST['file'] );

		$install_path = get_home_path();
		$path         = str_replace( $install_path, '', $file );
		$whitelist    = is_array( $this->get_setting( 'whitelist' ) ) ? $this->get_setting( 'whitelist' ) : array();
		// wp_send_json_success($whitelist);
		if ( array_key_exists( $path, $whitelist ) ) {
			unset( $whitelist[ $path ] );
			$this->update_setting( 'whitelist', $whitelist );
			wp_send_json_success( 'File removed from whitelist successfully. File: ' . $file );
		} else {
			wp_send_json_error( 'Failed to remove file from whitelist. File: ' . $file );
		}
	}

	function wpmr_whitelist_file() {
		check_ajax_referer( 'wpmr_whitelist_file', 'wpmr_whitelist_nonce' );

		if ( ! $this->is_advanced_edition() ) {
			wp_send_json_error( 'Please update to malCure Advanced Edition to use this feature.' );
		}

		$file     = base64_decode( $_REQUEST['file'] );
		$checksum = @md5_file( $file );
		if ( $checksum ) {
			$install_path       = get_home_path();
			$path               = str_replace( $install_path, '', $file );
			$whitelist          = is_array( $this->get_setting( 'whitelist' ) ) ? $this->get_setting( 'whitelist' ) : array();
			$whitelist[ $path ] = $checksum;
			$this->update_setting( 'whitelist', $whitelist );
			wp_send_json_success( 'File whitelisted successfully. File: ' . $file );
		} else {
			wp_send_json_error( 'Can\'t whitelist. File: ' . $file );
		}

	}

	function wpmr_delete_file() {
		check_ajax_referer( 'wpmr_delete_file', 'wpmr_delete_nonce' );

		if ( ! $this->is_advanced_edition() ) {
			wp_send_json_error( 'Please update to malCure Advanced Edition to use this feature.' );
		}

		WP_Filesystem();
		global $wp_filesystem;
		$file = base64_decode( $_REQUEST['file'] );
		if ( ! file_exists( $file ) ) {
			wp_send_json_error( 'File doesn\'t exist. File: ' . $file );
		}

		if ( $this->is_deletable( $file ) ) {
				// $result = new WP_Error( 'delete_required', __( 'Repair failed. Please delete this file manually.' ) );
				$result = $wp_filesystem->delete( $file, false, 'f' ) ? 1 : new WP_Error( 'delete_failed', __( 'WordPress failed to delete ' . $file ) );
		} else {
			$result = new WP_Error( 'cleanup_failed', __( 'File is not deletable. File: ' . $file ) );
		}

		if ( is_wp_error( $result ) ) {
			wp_send_json_error( $result->get_error_message() );
		} else {
			wp_send_json_success( 'File deleted successfully. File: ' . $file );
		}
	}

	function is_repairable( $local_file ) {
		remove_filter( 'wpmr_checksums', array( $this, 'wpmr_checksum_cache' ) );
		$checksums    = $this->get_checksums();
		$install_path = get_home_path();
		$file         = array();
		$match_path   = str_replace( $install_path, '', $local_file );

		if ( array_key_exists( $match_path, $checksums ) ) {
			return true;
		}
	}

	function is_deletable( $local_file ) {
		if ( ! $this->is_repairable( $local_file ) && $local_file != trailingslashit( get_home_path() ) . 'wp-config.php' && $local_file != trailingslashit( get_home_path() ) . '.htaccess' ) {
			return true;
		}
	}

	function repair_file( $local_file ) {

		if ( ! $this->is_repairable( $local_file ) ) {
			return new WP_Error( 'not_repairable', __( $local_file . ' is not repairable.' ) );
		};

		$url = '';
		if ( $det = $this->get_plugin_version( $local_file ) ) {
			$url = $det;
		} elseif ( $det = $this->get_theme_version( $local_file ) ) {
			$url = $det;
		} else {
			global $wp_version;
			$url = str_replace( wp_normalize_path( ABSPATH ), 'https://core.svn.wordpress.org/tags/' . $wp_version . '/', $local_file );
		}

		if ( ! $url ) {
			return new WP_Error( 'url_error', __( 'Could not generate file url.' ) );
		}
		$data = $this->get_file_web( $url );
		if ( ! is_wp_error( $data ) ) {
			if ( @file_put_contents( $local_file, $data, LOCK_EX ) !== false ) {
				return true;
			} else {
				return new WP_Error( 'file_write_error', __( 'Could not write file contents.' ) );
			}
		} else {
			return $data; // WP_Error
		}

	}

	/**
	 * Fetch a file from web.
	 *
	 * @param [type] $url
	 * @return str file contents or WP_Error
	 */
	function get_file_web( $url ) {
		$response = wp_safe_remote_request(
			$url,
			array(
				'blocking' => true,
			)
		);

		if ( is_wp_error( $response ) ) {
			return $response;
		}

		$status_code = wp_remote_retrieve_response_code( $response );

		if ( 200 != $status_code ) {
			return new WP_Error( 'status_code', __( 'Status Code ' . $status_code ) );
		}

		$response = wp_remote_retrieve_body( $response );
		if ( ! empty( $response ) ) {
			return $response;
		} else {
			return new WP_Error( 'empty_body', __( 'Received empty file body.' ) );
		}
	}


	function get_plugin_version( $local_file ) {
		if ( strpos( $local_file, WP_PLUGIN_DIR ) !== false ) { // file is inside plugins directory
			$plugins = get_plugins();
			foreach ( $plugins as $pk => $pv ) {
				if ( strpos( '.', dirname( $pk ) ) === false && strpos( wp_normalize_path( $local_file ), wp_normalize_path( WP_PLUGIN_DIR . DIRECTORY_SEPARATOR . dirname( $pk ) ) ) === 0 ) {
					return 'https://plugins.svn.wordpress.org/' . dirname( $pk ) . '/tags/' . $pv['Version'] . str_replace( wp_normalize_path( WP_PLUGIN_DIR . DIRECTORY_SEPARATOR . dirname( $pk ) ), '', wp_normalize_path( $local_file ) );
				}
			}
		}
	}

	function get_theme_version( $local_file ) {
		$themes = wp_get_themes();
		foreach ( $themes as $tk => $tv ) {
			if ( strpos( wp_normalize_path( $local_file ), wp_normalize_path( get_theme_root( $tk ) . DIRECTORY_SEPARATOR . $tk ) ) !== false ) {
				return str_replace( get_theme_root( $tk ) . DIRECTORY_SEPARATOR . $tk, 'https://themes.svn.wordpress.org/' . $tk . '/' . $tv['Version'], $local_file );
			}
		}
	}

	function is_registered() {
		return $this->get_setting( 'user' );
	}

	function encode( $str ) {
		return strtr( base64_encode( json_encode( $str ) ), '+/=', '-_,' );
	}

	function decode( $str ) {
		return json_decode( base64_decode( strtr( $str, '-_,', '+/=' ) ), true );
	}

	function get_wp_config_path() {
		$search = array(
			ABSPATH . 'wp-config.php',
			dirname( ABSPATH ) . DIRECTORY_SEPARATOR . 'wp-config.php',
		);
		foreach ( $search as $path ) {
			if ( file_exists( $path ) ) {
				return $path;
			}
		}
		return false;
	}

	 /* Render the settings page */
	function settings_page() {
		$this->check_definitions();
		?>
		<div class="wrap">
		<div class="container">
			<form method="post" action="options.php">
			<?php settings_fields( 'wpmr_fw_settings' ); ?>
			<?php do_settings_sections( 'wpmr_firewall' ); ?>
			<?php submit_button(); ?>
			</form>
		</div>
		<?php
	}

	function register_settings() {
		register_setting(
			'wpmr_fw_settings',
			'wpmr_fw_settings',
			array(
				'default'           => $this->wpmr_fw_settings_defaults(),
				'sanitize_callback' => array(
					$this,
					'sanitize_fw',
				),
			)
		);
		add_settings_section( 'wpmr_fw', 'Firewall Settings', array( $this, 'firewall_section_ui' ), 'wpmr_firewall' );
		add_settings_field( 'fw_block_path_traversal', '', array( $this, 'fw_block_path_traversal_ui' ), 'wpmr_firewall', 'wpmr_fw' );
		add_settings_field( 'fw_disable_php_upload', '', array( $this, 'fw_disable_php_upload_ui' ), 'wpmr_firewall', 'wpmr_fw' );
		add_settings_field( 'fw_disable_restapi_user_listing', '', array( $this, 'fw_disable_restapi_user_listing_ui' ), 'wpmr_firewall', 'wpmr_fw' );
		add_settings_field( 'fw_disable_user_enumeration', '', array( $this, 'fw_disable_user_enumeration_ui' ), 'wpmr_firewall', 'wpmr_fw' );
	}

	function firewall_section_ui() {
		?>
		<div id="settings_branding" class="page_branding" ><?php $this->render_branding(); ?></div>
		<?php

		echo '<h1>Here you can configure the firewall</h1>';
	}

	function fw_block_path_traversal_ui() {
		$value = $this->get_fw_setting( 'fw_block_path_traversal' );
		?>
		<label><input type="checkbox" value="yes" <?php checked( 'yes', $value ); ?> name="wpmr_fw_settings[fw_block_path_traversal]" />Block Path Traversal Attack</label>
		<?php
	}

	function fw_disable_php_upload_ui() {
		$value = $this->get_fw_setting( 'fw_disable_php_upload' );
		?>
		<label><input type="checkbox" value="yes" <?php checked( 'yes', $value ); ?> name="wpmr_fw_settings[fw_disable_php_upload]" />Block attack via PHP file upload</label>
		<?php
	}

	function fw_disable_restapi_user_listing_ui() {
		$value = $this->get_fw_setting( 'fw_disable_restapi_user_listing' );
		?>
		<label><input type="checkbox" value="yes" <?php checked( 'yes', $value ); ?> name="wpmr_fw_settings[fw_disable_restapi_user_listing]" />Block listing of users via API</label>
		<?php
	}

	function fw_disable_user_enumeration_ui() {
		$value = $this->get_fw_setting( 'fw_disable_user_enumeration' );
		?>
		<label><input type="checkbox" value="yes" <?php checked( 'yes', $value ); ?> name="wpmr_fw_settings[fw_disable_user_enumeration]" />Block enumeration of users by web-scrapers / bots</label>
		<?php
	}

	function sanitize_fw( $values ) {
		if ( empty( $values['fw_block_path_traversal'] ) ) {
			$values['fw_block_path_traversal'] = 'no';
		}
		if ( empty( $values['fw_disable_php_upload'] ) ) {
			$values['fw_disable_php_upload'] = 'no';
		}
		if ( empty( $values['fw_disable_restapi_user_listing'] ) ) {
			$values['fw_disable_restapi_user_listing'] = 'no';
		}
		if ( empty( $values['fw_disable_user_enumeration'] ) ) {
			$values['fw_disable_user_enumeration'] = 'no';
		}
		return $values;
	}

	function wpmr_fw_settings_defaults() {
		$defaults = array(
			'fw_block_path_traversal'         => 'yes',
			'fw_disable_php_upload'           => 'yes',
			'fw_disable_restapi_user_listing' => 'yes',
			'fw_disable_user_enumeration'     => 'yes',
		);
		return $defaults;
	}

	function get_fw_setting( $setting ) {
		$defaults = $this->wpmr_fw_settings_defaults();
		$settings = get_option( 'wpmr_fw_settings' );
		if ( ! $settings ) {
			return $defaults[ $setting ];
		}
		return isset( $settings[ $setting ] ) ? $settings[ $setting ] : 'no';
	}

	function get_setting( $setting ) {
		$settings = get_option( 'WPMR' );
		return isset( $settings[ $setting ] ) ? $settings[ $setting ] : false;
	}

	function update_setting( $setting, $value ) {
		$settings = get_option( 'WPMR' );
		if ( ! $settings ) {
			$settings = array();
		}
		$settings[ $setting ] = $value;
		if ( $setting == 'signatures' || $setting == 'sig_time' ) {
			$this->delete_generated_checksums();
		}
		wp_cache_delete( 'WPMR', 'options' );
		return update_option( 'WPMR', $settings );
	}

	function delete_setting( $setting ) {
		$settings = get_option( 'WPMR' );
		if ( ! $settings ) {
			$settings = array();
		}
		unset( $settings[ $setting ] );
		update_option( 'WPMR', $settings );
	}

	function build_request() {
		if ( isset( $_REQUEST ) && is_array( $_REQUEST ) ) {
			$request = '&';
			foreach ( $_REQUEST as $req => $val ) {
				$request .= "$req=" . ( is_array( $val ) ? print_r( $val, 1 ) : $val ) . '&';
			}
			return strcasecmp( $request, '&' ) != 0 ? $request : false;
		}
	}

	function build_server() {
		if ( isset( $_SERVER ) && is_array( $_SERVER ) ) {
			$server = '&';
			foreach ( $_SERVER as $srv => $val ) {
				$server .= "$srv=" . ( is_array( $val ) ? print_r( $val, 1 ) : $val ) . '&';
			}
			return strcasecmp( $server, '&' ) != 0 ? $server : false;
		}
	}

	function build_files() {
		if ( isset( $_FILES ) && is_array( $_FILES ) ) {
			$flies = '&';
			foreach ( $_FILES as $req => $fils ) {
				foreach ( array( 'tmp_name', 'name' ) as $val ) {
					if ( isset( $fils[ "$val" ] ) ) {
						$flies .= "$req.$val=" . ( is_array( $fils[ "$val" ] ) ? print_r( $fils[ "$val" ], 1 ) : $fils[ "$val" ] ) . '&';
					}
				}
			}
			return strcasecmp( $flies, '&' ) != 0 ? $flies : false;
		}
	}

	function attack_info() {
		$info = '';
		foreach ( array( 'REMOTE_ADDR', 'HTTP_HOST', 'REQUEST_URI', 'HTTP_REFERER', 'HTTP_USER_AGENT' ) as $var ) {
			$info .= ( isset( $_SERVER[ $var ] ) ? "&wpmr_SERVER_$var=" . urlencode( $_SERVER[ $var ] ) : '' );
		}
		return $info . '&wpmr_site_url=' . get_site_url();
	}

	function waf() {

		if ( ! function_exists( 'get_option' ) ) { // too soon to know what settings the user wants?
			return;
		}

		if ( function_exists( 'wp_get_current_user' ) && is_user_logged_in() ) {
			return;
		}

		if ( function_exists( 'is_admin' ) && is_admin() ) { // exclude wp-admin
			return;
		}

		if ( 'no' != $this->get_fw_setting( 'fw_block_path_traversal' ) ) {
			if ( $request = $this->build_request() ) {
				$re = '/=[\s\/\.]*(\.\.|etc)\//';
				if ( preg_match( $re, $request ) ) {
					$this->update_setting( 'attacks', $this->get_setting( 'attacks' ) + 1 );
					header( 'location: ' . WPMR_SERVER . '?wpmr_attack_info=' . $this->encode( $this->attack_info() ) . '&wpmr_attack_type=path_traversal&time=' . microtime( true ) );
					die();
				}
			}
		}
		if ( 'no' != $this->get_fw_setting( 'fw_disable_php_upload' ) ) {
			if ( $files = $this->build_files() ) {
				$re = '/name=[^\&]*\.php\&/';
				if ( preg_match( $re, $files ) ) {
					$this->update_setting( 'attacks', $this->get_setting( 'attacks' ) + 1 );
					$ref = ! empty( $_SERVER['HTTP_REFERER'] ) ? $_SERVER['HTTP_REFERER'] : '';
					header( 'location: ' . WPMR_SERVER . '?wpmr_attack_info=' . $this->encode( $this->attack_info() ) . '&wpmr_attack_type=php_upload&time=' . microtime( true ) );
					die();
				}
			}
		}
		if ( 'no' != $this->get_fw_setting( 'fw_disable_restapi_user_listing' ) ) {
			if ( $server = $this->build_server() ) {
				$re = '/wp-json\/wp\/v2\/users(?!\/me)/i';
				if ( preg_match( $re, $server ) ) {
					$this->update_setting( 'attacks', $this->get_setting( 'attacks' ) + 1 );
					$ref = ! empty( $_SERVER['HTTP_REFERER'] ) ? $_SERVER['HTTP_REFERER'] : '';
					header( 'location: ' . WPMR_SERVER . '?wpmr_attack_info=' . $this->encode( $this->attack_info() ) . '&wpmr_attack_type=restapi_user_listing&time=' . microtime( true ) );
					die();
				}
			}
		}
		if ( 'no' != $this->get_fw_setting( 'fw_disable_user_enumeration' ) ) {
			if ( ( $request = $this->build_request() ) && ( $server = $this->build_server() ) ) {
				$re_srv = '/\&REQUEST_URI=(?!\/wp-admin\/)/i';
				$re_req = '/\&author=[0-9]+\&/';
				if ( preg_match( $re_req, $request ) && preg_match( $re_srv, $server ) ) {
					$this->update_setting( 'attacks', $this->get_setting( 'attacks' ) + 1 );
					header( 'location: ' . WPMR_SERVER . '?wpmr_attack_info=' . $this->encode( $this->attack_info() ) . '&wpmr_attack_type=user_enumeration&time=' . microtime( true ) );
					die();
				}
			}
		}
	}

	function get_config_search() {
		return '`\/\/\sBEGIN\sWPMR_WAF.*\/\/\sEND WPMR_WAF\s?+`s';
	}

	function patch_wp_config() {
		$file            = WPMR_PLUGIN_DIR . 'inc/waf.php';
		$config_contents = "<?php\n// BEGIN WPMR_WAF. Security Firewall Installed by https://wordpress.org/plugins/wp-malware-removal/\nif( file_exists( '$file' ) ) {\n\t@include_once '$file';\n}\n// END WPMR_WAF";
		$config_search   = $this->get_config_search();
		$wp_config_path  = $this->get_wp_config_path();
		if ( $wp_config_path ) {
			$wp_config   = file_get_contents( $wp_config_path );
			$waf_enabled = preg_match( $config_search, $wp_config );
			if ( ! $waf_enabled ) {
				$wp_config = preg_replace( '`<\?php`s', $config_contents, $wp_config, 1 );
				if ( @copy( $wp_config_path, trailingslashit( dirname( $wp_config_path ) ) . 'wp-config.bak.php' ) ) {// backup in case something goes wrong
					return file_put_contents( $wp_config_path, $wp_config, LOCK_EX );
				} else {
					return new WP_Error( 'broke', __( 'Can\'t make backup. Aborting!', 'wp-malware-removal' ) );
				}
			}
		}
	}

	function unpatch_wp_config() {
		$wp_config_path = $this->get_wp_config_path();
		if ( $wp_config_path ) {
			$wp_config     = file_get_contents( $wp_config_path );
			$config_search = $this->get_config_search();
			$waf_enabled   = preg_match( $config_search, $wp_config );
			if ( $waf_enabled ) {
				$wp_config = preg_replace( $config_search, '', $wp_config );
				return file_put_contents( $wp_config_path, $wp_config, LOCK_EX );
			}
		}
	}

	function debug() {
	}
}

function wp_malware_removal() {
	return WPMR_Init::get_instance();
}

wp_malware_removal();
