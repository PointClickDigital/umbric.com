<?php

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

if ( defined( 'WP_CLI' ) && WP_CLI ) {
	class Malcure_Advanced {
		function __construct() {

			$brand = <<<'EOD'
			


      ||**********************************************************************||

             ███╗   ███╗ █████╗ ██╗      ██████╗██╗   ██╗██████╗ ███████╗
             ████╗ ████║██╔══██╗██║     ██╔════╝██║   ██║██╔══██╗██╔════╝
             ██╔████╔██║███████║██║     ██║     ██║   ██║██████╔╝█████╗  
             ██║╚██╔╝██║██╔══██║██║     ██║     ██║   ██║██╔══██╗██╔══╝  
             ██║ ╚═╝ ██║██║  ██║███████╗╚██████╗╚██████╔╝██║  ██║███████╗
             ╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝

      ||***********************  © Copyright 2020 MalCure ********************||
      ||***********************  Author —                 ********************||
      ||***********************  Shiv / shiv@malcure.com  ********************||

EOD;
			WP_CLI::log( WP_CLI::colorize( $this->brand_color() . $brand . '%n' ) );
			$wpmr    = wp_malware_removal();
			$updates = $wpmr->definition_updates_available();

			if ( $updates ) {
				if ( $wpmr->is_advanced_edition() ) {
					$this->sync();
					WP_CLI::log( WP_CLI::colorize( "%RUpdated to the latest definitions.\n\tYou had version %Y" . $updates['current'] . "\n\t%RUpdated version is %Y" . $updates['new'] . '%n' ) );
				} else {
					WP_CLI::log( WP_CLI::colorize( "%RNew Definition Updates Are Available.\n\tYou have version %Y" . $updates['current'] . "\n\t%RLatest version is %Y" . $updates['new'] . '%n' ) );
				}
			}
		}

		private function do_pro() {
			$wpmr = wp_malware_removal();
			if ( ! $wpmr->is_advanced_edition() ) {
				WP_CLI::error( 'Full CLI integration is only possible with malCure Advanced Edition. Please see: https://malcure.com/?p=116' );
			}
		}

		/**
		 * Populates all commandline args in case they are missing
		 *
		 * @param [type] $assoc_args
		 * @return void
		 */
		function populate_args( $assoc_args ) {
			// Essentials

			// On / Off / Yes / No / True / False
			$assoc_args['mcdebug']      = ! empty( $assoc_args['mcdebug'] ) ? $this->mc_get_bool( $assoc_args['mcdebug'] ) : false;
			$assoc_args['mcskipdb']     = ! empty( $assoc_args['mcskipdb'] ) ? $this->mc_get_bool( $assoc_args['mcskipdb'] ) : false;
			$assoc_args['mcskipfiles']  = ! empty( $assoc_args['mcskipfiles'] ) ? $this->mc_get_bool( $assoc_args['mcskipfiles'] ) : false;
			$assoc_args['mcsuspicious'] = ! empty( $assoc_args['mcsuspicious'] ) ? $this->mc_get_bool( $assoc_args['mcsuspicious'] ) : false;
			$assoc_args['mcskipdirs']   = ! empty( $assoc_args['mcskipdirs'] ) ? $assoc_args['mcskipdirs'] : '';

			// Advanced arguments
			$assoc_args['mcregex']        = ! empty( $assoc_args['mcregex'] ) ? $assoc_args['mcregex'] : '';
			$assoc_args['mcdbquery']      = ! empty( $assoc_args['mcdbquery'] ) ? $assoc_args['mcdbquery'] : '';
			$assoc_args['mcdbregex']      = ! empty( $assoc_args['mcdbregex'] ) ? $assoc_args['mcdbregex'] : '';
			$assoc_args['mcextrafile']    = ! empty( $assoc_args['mcextrafile'] ) ? $assoc_args['mcextrafile'] : '';
			$assoc_args['mcscanonlydirs'] = ! empty( $assoc_args['mcscanonlydirs'] ) ? $assoc_args['mcscanonlydirs'] : '';
			$assoc_args['mcbatchsize']    = ! empty( $assoc_args['mcbatchsize'] ) ? $assoc_args['mcbatchsize'] : 50;

			return $assoc_args;
		}

		/**
		 * Populates all ajax args in case they are missing
		 *
		 * @param [type] $assoc_args
		 * @return void
		 */
		function get_ajax_args( $assoc_args ) {
			// Essentials
			// 'files'                   => $bootstrap['files'],
			// On / Off / Yes / No / True / False
			$ajax_args['timestamp']    = time();
			$ajax_args['debug']        = ! empty( $assoc_args['mcdebug'] ) ? $this->mc_get_bool( $assoc_args['mcdebug'] ) : false;
			$ajax_args['do_db_scan']   = ! empty( $assoc_args['mcskipdb'] ) ? ! $this->mc_get_bool( $assoc_args['mcskipdb'] ) : true;
			$ajax_args['do_file_scan'] = ! empty( $assoc_args['mcskipfiles'] ) ? ! $this->mc_get_bool( $assoc_args['mcskipfiles'] ) : true;
			$ajax_args['suspicious']   = ! empty( $assoc_args['mcsuspicious'] ) ? $this->mc_get_bool( $assoc_args['mcsuspicious'] ) : false;
			$ajax_args['skipdirs']     = ! empty( $assoc_args['mcskipdirs'] ) ? $assoc_args['mcskipdirs'] : '';

			// Advanced arguments
			$ajax_args['regex']               = ! empty( $assoc_args['mcregex'] ) ? $assoc_args['mcregex'] : '';
			$ajax_args['wpmr_extra_db_query'] = ! empty( $assoc_args['mcdbquery'] ) ? $assoc_args['mcdbquery'] : '';
			$ajax_args['wpmr_extra_db_regex'] = ! empty( $assoc_args['mcdbregex'] ) ? $assoc_args['mcdbregex'] : '';
			$ajax_args['wpmr_extra_file']     = ! empty( $assoc_args['mcextrafile'] ) ? $assoc_args['mcextrafile'] : '';
			$ajax_args['wpmr_scan_only_dirs'] = ! empty( $assoc_args['mcscanonlydirs'] ) ? $assoc_args['mcscanonlydirs'] : '';

			return $ajax_args;
		}

		function scan( $args, $assoc_args ) {
			$this->do_pro();
			$start_time                   = time();
			$assoc_args                   = $this->populate_args( $assoc_args );
			$ajax_args                    = $this->get_ajax_args( $assoc_args );
			$ajax_args['wpmr_init_nonce'] = wp_create_nonce( 'wpmr_init_scan' );
			$ajax_args['action']          = 'wpmr_init_scan';
			$response                     = wp_remote_post(
				admin_url( 'admin-ajax.php' ),
				array(
					'blocking' => true,
					'timeout'  => 25,
					'body'     => $ajax_args,
				)
			);
			if ( '200' != wp_remote_retrieve_response_code( $response ) || ( ! $body = wp_remote_retrieve_body( $response ) ) ) {
				WP_CLI::log( '$response' );
				WP_CLI::log( $response );
				WP_CLI::log( 'response_code' );
				WP_CLI::log( wp_remote_retrieve_response_code( $response ) );
				WP_CLI::log( 'response_body' );
				WP_CLI::log( wp_remote_retrieve_body( $response ) );
				WP_CLI::log( WP_CLI::colorize( "%RWebsite didn't respond. Apparently the host has blocked the site?\n\nPlease try alternate scan with %G%_wp malcure scan_alt%n\n" ) );
				WP_CLI::error( 'Error receiving. Aborting! Status: ' . wp_remote_retrieve_response_code( $response ) . "\n" );
			}
			$malcure_scan = array();
			$body         = json_decode( $body, true );
			if ( ! is_null( $body ) ) {
				WP_CLI::log( "\nFiles To Scan:\t" . $body['count'] );
				WP_CLI::log( "Batch-Size:\t" . $assoc_args['mcbatchsize'] );
				/*************** Database HACK RESULTS */
				$db_scan = $body['db_scan'];
				if ( ! empty( $db_scan ) ) {
					WP_CLI::log( "\n" . WP_CLI::colorize( $this->heading_format() . '  DATABASE SCAN RESULTS  %n' ) );
					foreach ( $db_scan as $key => $value ) {
						WP_CLI::log( WP_CLI::colorize( $this->get_severity_format( strtoupper( $value['severity'] ) ) . '    ' . strtoupper( $value['severity'] ) . '    ' . $value['signature'] . '    ' . html_entity_decode( $value['message'] ) . '%n' ) );
					}
				}
				/*************** TITLE HACK RESULTS */
				if ( ! empty( $title_hack ) ) {
					WP_CLI::log( "\n" . WP_CLI::colorize( $this->heading_format() . '  TITLE SCAN RESULTS  %n' ) );
					WP_CLI::log( WP_CLI::colorize( '%R' . $title_hack ) );
				} else {
					// WP_CLI::log( "\n" . WP_CLI::colorize( $this->heading_format().'  TITLE SCAN RESULTS  %n' ) );
					// WP_CLI::log( WP_CLI::colorize("%n\tNONE%n" ));
				}
				if ( $ajax_args['do_file_scan'] && ! empty( $body['files'] ) && count( $body['files'] ) ) {
					$files                              = $body['files'];
					$total                              = $body['count'];
					$ajax_args['action']                = 'wpmr_scan_files';
					$ajax_args['wpmr_scan_files_nonce'] = wp_create_nonce( 'wpmr_scan_files' );
					if ( ! $assoc_args['mcdebug'] ) {
						$progress = WP_CLI\Utils\make_progress_bar( 'Progress:', count( $files ) );
					} else {
						$progress = false;
					}
					WP_CLI::log( "\n" . WP_CLI::colorize( $this->heading_format() . '  FILE SCAN RESULTS  %n' ) );
					$failed_files = array();
					while ( count( $files ) ) {
						$arrbatch = array_splice( $files, 0, $assoc_args['mcbatchsize'] );
						if ( $progress ) {
							$progress->tick( count( $arrbatch ) );
						} else {
							$i = (string) number_format( round( ( ( ( $total - count( $files ) ) / $total ) * 100 ), 1 ), 1, '.', '' );
							WP_CLI::log( str_pad( $i, ( strlen( $i ) ), ' ' ) . "%\t" );
						}
						$ajax_args['files'] = $arrbatch;
						$response           = wp_remote_post(
							admin_url( 'admin-ajax.php' ),
							array(
								'blocking' => true,
								'timeout'  => 25,
								'body'     => $ajax_args,
							)
						);
						$status             = wp_remote_retrieve_response_code( $response );
						$response           = wp_remote_retrieve_body( $response );
						if ( $status != 200 || empty( $response ) || is_null( json_decode( $response, 1 ) ) ) {

							foreach ( $arrbatch as $failed ) {
								WP_CLI::log( WP_CLI::colorize( '%w    ' . strtoupper( 'scan failure' ) . '    ' . 'SKIPPED' . "\t\t" . $failed . '%n' ) );
							}
							$failed_files = array_merge( $failed_files, $arrbatch );
							continue;
						}
						$result = json_decode( $response, 1 );
						$result = $result['report'];
						foreach ( $result as $file => $report ) {
							WP_CLI::log( WP_CLI::colorize( $this->get_severity_format( strtoupper( $report['severity'] ) ) . '    ' . strtoupper( $report['severity'] ) . '    ' . $report['signature'] . "\t\t" . $file . '%n' ) );
						}
					}
					if ( ! empty( $progress ) ) {
						$progress->finish();
					}
					echo "\n";
				}
				$end_time       = time();
				$execution_time = ( $end_time - $start_time );
				WP_CLI::success(
					'malCure Scan Completed in ' . human_time_diff( $start_time, $end_time ) . "!\n"
				);
			} else {
				print_r( 'invalid json received from bootstrap' );
			}
		}

		public function scan_alt( $args, $assoc_args ) {
			$this->do_pro();
			$start_time              = time();
			$assoc_args['timestamp'] = time();
			if ( empty( $assoc_args['mcsuspicious'] ) || $assoc_args['mcsuspicious'] != 'yes' ) {
				$assoc_args['mcsuspicious'] = false;
			} else {
				$assoc_args['mcsuspicious'] = true;
			}
			if ( ! empty( $assoc_args['mcskipdb'] ) && $assoc_args['mcskipdb'] == 'true' ) {
				$assoc_args['do_db_scan'] = false;
			} else {
				$assoc_args['do_db_scan'] = true;
			}
			if ( ! empty( $assoc_args['mcskipfiles'] ) && $assoc_args['mcskipfiles'] == 'true' ) {
				$assoc_args['do_file_scan'] = false;
			} else {
				$assoc_args['do_file_scan'] = true;
			}
			if ( empty( $assoc_args['mcbatchsize'] ) ) {
				$batchsize = 50;
			} else {
				$batchsize = $assoc_args['mcbatchsize'];
			}
			$wpmr       = wp_malware_removal();
			$bootstrap  = $wpmr->bootstrap( $assoc_args );
			$files      = $bootstrap['files'];
			$db_scan    = $bootstrap['db_scan'];
			$title_hack = $bootstrap['title_hack'];
			WP_CLI::log( "\nFiles To Scan:\t" . $bootstrap['count'] );
			WP_CLI::log( "Batch-Size:\t" . $batchsize );
			if ( ! empty( $db_scan ) ) {
				WP_CLI::log( "\n" . WP_CLI::colorize( $this->brand_color() . '  DATABASE SCAN RESULTS  %n' ) );
				foreach ( $db_scan as $key => $value ) {
					WP_CLI::log( WP_CLI::colorize( '%r' . "\t" . strtoupper( $value['severity'] ) . "\t" . $value['signature'] . "\t" . html_entity_decode( $value['message'] ) ) );
				}
			}
			if ( ! empty( $title_hack ) ) {
				WP_CLI::log( "\n" . WP_CLI::colorize( $this->brand_color() . '  TITLE SCAN RESULTS  ' ) );
				WP_CLI::log( $title_hack );
			}
			$total = $bootstrap['count'];
			if ( empty( $assoc_args['mcdebug'] ) || $assoc_args['mcdebug'] != 'true' ) {
				$progress = WP_CLI\Utils\make_progress_bar( 'Progress:', count( $files ) );
			} else {
				$progress = false;
			}
			WP_CLI::log( "\n" . WP_CLI::colorize( $this->brand_color() . ' FILE SCAN RESULTS  %n' ) );
			if ( count( $files ) ) {
				do {
					$arrbatch = array_splice( $files, 0, $batchsize );
					if ( $progress ) {
						$progress->tick( count( $arrbatch ) );
					}
					if ( ! $progress ) {
						$i = (string) number_format( round( ( ( ( $total - count( $files ) ) / $total ) * 100 ), 1 ), 1, '.', '' );
						WP_CLI::log( str_pad( $i, ( strlen( $i ) ), ' ' ) . "%\t" );
					}
					$batch                 = $arrbatch;
					$assoc_args['mcfiles'] = $batch;
					$result                = $wpmr->wpmr_scan_files( $assoc_args );
					$result                = $result['report'];
					foreach ( $result as $file => $report ) {
						WP_CLI::log( WP_CLI::colorize( $this->get_severity_format( strtoupper( $report['severity'] ) ) . '    ' . strtoupper( $report['severity'] ) . '    ' . $report['signature'] . "\t\t" . $file ) );
					}
				} while ( count( $files ) );
			}
			if ( ! empty( $progress ) ) {
				$progress->finish();
			}
			echo "\n";

			$end_time       = time();
			$execution_time = ( $end_time - $start_time );

			WP_CLI::success(
				'malCure Scan Completed in ' . human_time_diff( $start_time, $end_time ) . "!\n"
			);
		}

		/**
		 * Update definitions
		 *
		 * @param array $args
		 * @param array $assoc_args
		 * @return void
		 */
		public function sync( $args = array(), $assoc_args = array() ) {
			$wpmr = wp_malware_removal();
			$wpmr->update_definitions_cli( 1 );
		}


		function license_req( $action = 'check_license', $key = false ) {
			$wpmr = wp_malware_removal();
			if ( empty( $key ) ) {
				$key = $wpmr->get_setting( 'license_key' );
			}
			if ( empty( $key ) ) {
				if ( $action == 'check_license' ) {
					WP_CLI::error( 'Not activated. No saved license key.' );
				}
				WP_CLI::error( 'Please run with your license key like: ' . WP_CLI::colorize( '%Rwp malcure [activate|deactivate|status] <license key>%n' . "\n%Reg: %Ywp malcure activate yourlicensekey" ) );
			}
			$key         = trim( $key );
			$url         = MALCURE_API . '?edd_action=' . $action . '&item_id=1725&license=' . $key . '&url=' . site_url();
			$response    = wp_safe_remote_request( $url );
			$headers     = wp_remote_retrieve_headers( $response );
			$status_code = wp_remote_retrieve_response_code( $response );
			if ( 200 != $status_code ) {
				WP_CLI::error( 'Error ' . $status_code . ' fetching Update.' );
			}
			if ( is_wp_error( $response ) ) {
				WP_CLI::error( $response->get_error_message() );
			}
			$body   = wp_remote_retrieve_body( $response );
			$status = json_decode( $body, true );
			if ( is_null( $status ) ) {
				WP_CLI::error( 'Unparsable response data.' );
			}
			if ( $status['success'] != true ) {
				WP_CLI::error( sanitize_text_field( $status['license'] ) );
			}
			if ( ! empty( $status['success'] ) && $status['success'] == true ) {
				if ( $action == 'deactivate_license' ) {
					$wpmr->delete_setting( 'license_key' );
					delete_transient( 'WPMR_license_status' );
					$name = $status['customer_name'];
					$name = array_filter( explode( ' ', $name ) );
					$fn   = empty( $name ) ? explode( '@', $email )[0] : array_shift( $name );
					WP_CLI::success( 'Deactivated!' );
					WP_CLI::log( WP_CLI::colorize( "\t%G" . '%N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G" . '^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G" . '********************************************************************************%N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G" . '%N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G\t" . 'You are still a proud owner of the professional plan. %N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G\t" . 'Thank you ' . $fn . '! Catch ya on some other WP install.%N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G" . '%N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G" . '^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G" . '********************************************************************************%N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G" . '%N' ) );
				}
				if ( $action == 'activate_license' ) {
					WP_CLI::success( 'Activated! We are setting up everything...' );
					$wpmr->update_setting( 'license_key', $key );
					$email = $status['customer_email'];
					$wpmr  = wp_malware_removal();
					$name  = $status['customer_name'];
					$name  = array_filter( explode( ' ', $name ) );
					$fn    = empty( $name ) ? explode( '@', $email )[0] : array_shift( $name );
					$ln    = empty( $name ) ? explode( '@', $email )[0] : array_shift( $name );
					if ( ! $wpmr->is_registered() ) {
						$wpmr->wpmr_cli_register( $email, $fn, $ln, true );
					}
					$this->sync();
					WP_CLI::log( WP_CLI::colorize( "\t%G" . '%N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G" . '^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G" . '********************************************************************************%N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G" . '%N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G\t" . 'voilà! You are a proud owner of the professional plan. %N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G\t" . 'Thank you ' . $fn . '! We\'ve set up everything for you!%N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G" . '%N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G" . '^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G" . '********************************************************************************%N' ) );
					WP_CLI::log( WP_CLI::colorize( "\t%G" . '%N' ) );
					$this->help();
				}
				if ( $action == 'check_license' ) {
					WP_CLI::log( 'LICENSE INFO' );
					foreach ( $status as $key => $value ) {
						WP_CLI::log( "\t" . $key . ' : ' . $value );
					}
				}
			}
		}

		public function activate( $args, $assoc_args ) {
			$action = 'activate_license';
			if ( empty( $args[0] ) ) {
				$this->license_req( $action, false );
			} else {
				$this->license_req( $action, $args[0] );
			}
		}

		public function deactivate( $args, $assoc_args ) {
			$action = 'deactivate_license';
			if ( empty( $args[0] ) ) {
				$this->license_req( $action, false );
			} else {
				$this->license_req( $action, $args[0] );
			}
		}

		public function status( $args, $assoc_args ) {
			$action = 'check_license';
			if ( empty( $args[0] ) ) {
				$this->license_req( $action, false );
			} else {
				$this->license_req( $action, $args[0] );
			}
		}

		public function register( $args, $assoc_args ) {
			if ( empty( $assoc_args['mc-email'] ) ) {
				WP_CLI::error( 'Need email' );
			}
			if ( ! filter_var( $assoc_args['mc-email'], FILTER_VALIDATE_EMAIL ) ) {
				WP_CLI::error( 'Need authentic email.' );
			}
			$email = $assoc_args['mc-email'];
			$fn    = $ln = '';
			if ( empty( $assoc_args['mc-fname'] ) ) {
				$fn = explode( '@', $assoc_args['mc-email'] )[0];
			}
			if ( empty( $assoc_args['mc-lname'] ) ) {
				$ln = $fn;
			}
			$wpmr = wp_malware_removal();
			$wpmr->wpmr_cli_register( $email, $fn, $ln, 1 );
		}

		public function info() {
			$wpmr  = wp_malware_removal();
			$files = $wpmr->get_all_files();
			global $wp_version;
			WP_CLI::log( WP_CLI::colorize( '%n%wWebsite URL: %B' . get_bloginfo( 'url' ) ) );
			WP_CLI::log( WP_CLI::colorize( '%n%wWP URL: %B' . get_bloginfo( 'wpurl' ) ) );
			WP_CLI::log( WP_CLI::colorize( '%n%wWP Installation DIR: %B' . ABSPATH ) );
			WP_CLI::log( WP_CLI::colorize( '%n%wWP Version: %B' . get_bloginfo( 'version' ) ) );
			WP_CLI::log( WP_CLI::colorize( '%n%wWP Language: %B' . get_bloginfo( 'language' ) ) );
			WP_CLI::log( WP_CLI::colorize( is_multisite() ? '%n%wMultisite: %BYes' : '%n%wMultisite: %BNo' ) );
			WP_CLI::log( WP_CLI::colorize( '%n%wActive Theme: %B' . get_bloginfo( 'stylesheet_directory' ) ) );
			WP_CLI::log( WP_CLI::colorize( '%n%Parent Theme: %B' . get_bloginfo( 'template_directory' ) ) );
			WP_CLI::log( WP_CLI::colorize( '%n%wUser Roles:%B' ) );
			global $wp_roles;
			foreach ( $wp_roles->roles as $role => $capabilities ) {
				WP_CLI::log( "\t" . $role );
			}
			WP_CLI::log( WP_CLI::colorize( '%n%wMust-Use Plugins:%B' ) );
			$mu = get_mu_plugins();
			foreach ( $mu as $key => $value ) {
				WP_CLI::log( "\t" . $key );
			}
			WP_CLI::log( WP_CLI::colorize( '%n%wDrop-ins:%B' ) );
			$dropins = get_dropins();
			foreach ( $dropins as $key => $value ) {
				WP_CLI::log( "\t" . $key );
			}
			WP_CLI::log( WP_CLI::colorize( '%n%wPHP: %B' . phpversion() ) );
			WP_CLI::log( WP_CLI::colorize( '%n%wServer: %B' . php_uname() ) );
			WP_CLI::log( WP_CLI::colorize( '%n%wLast Updated: %B' . $wpmr->get_last_updated_ago() ) );
			WP_CLI::log( WP_CLI::colorize( '%n%wChecksum-Count: %B' . count( $wpmr->get_checksums() ) ) );
			WP_CLI::log( WP_CLI::colorize( '%n%wDefinition-Count: %B' . $wpmr->get_definition_count() ) );
			WP_CLI::log( WP_CLI::colorize( '%n%wDefinition-Version: %B' . $wpmr->get_definition_version() ) );

			WP_CLI::log( WP_CLI::colorize( '%n%wFiles: %B' . count( $files ) ) );
			WP_CLI::log( WP_CLI::colorize( '%n%wRegistration Details: %B' . print_r( $wpmr->get_setting( 'user' ), 1 ) ) );
			WP_CLI::log( WP_CLI::colorize( '%YRun %Gwp malcure hidden%Y to show hidden files' ) );
			$this->license_req();
		}

		function hidden( $files ) {
			$wpmr    = wp_malware_removal();
			$files   = $wpmr->get_all_files();
			$hidden  = array_filter(
				$files,
				function( $v ) {
					return ( empty( explode( '.', basename( $v ) )[0] ) || empty( explode( '.', basename( dirname( $v ) ) )[0] ) ) ? true : false;
				}
			);
			$hidden  = array_values( $hidden );
			$newlist = array();
			foreach ( $hidden as $k => $v ) {
				$parts = explode( '.', basename( dirname( $v ) ) );
				if ( empty( $parts [0] ) ) {
					$newlist[ dirname( $v ) ] = '[DIR] ' . dirname( $v );
				}
				$newlist[ $v ] = '[FILE] ' . $v;
			}
			WP_CLI::log( WP_CLI::colorize( '%y' . implode( $newlist, "\n" ) ) );
		}

		public function help() {
			wp_CLI::log( "\t" );
			wp_CLI::log( 'USAGE: ' );
			wp_CLI::log( WP_CLI::colorize( "\t%Y" ) );
			wp_CLI::log( WP_CLI::colorize( '%rwp malcure help' ) );
			wp_CLI::log( WP_CLI::colorize( "\t%YThis help screen / information." ) );
			wp_CLI::log( '' );
			wp_CLI::log( WP_CLI::colorize( '%rwp malcure info%Y' ) );
			wp_CLI::log( WP_CLI::colorize( "\t%YDisplays WP info." ) );
			wp_CLI::log( '' );
			wp_CLI::log( WP_CLI::colorize( '%rwp malcure hidden%Y' ) );
			wp_CLI::log( WP_CLI::colorize( "\t%YList hidden files and directories." ) );
			wp_CLI::log( '' );
			wp_CLI::log( WP_CLI::colorize( '%rwp malcure register --mc-email=myemail@example.com --mc-fname="Firstname" --mc-lname="Lastname"' ) );
			wp_CLI::log( WP_CLI::colorize( "\t%YRegister (free) to get definition updates." ) );
			wp_CLI::log( '' );
			wp_CLI::log( WP_CLI::colorize( '%rwp malcure sync' ) );
			wp_CLI::log( WP_CLI::colorize( "\t%YUpdate definitions. Works only if you are registered." ) );
			wp_CLI::log( '' );
			wp_CLI::log( WP_CLI::colorize( '%rwp malcure status%Y' ) );
			wp_CLI::log( "\tDisplays license status." );
			wp_CLI::log( "\t" );
			wp_CLI::log( WP_CLI::colorize( '%rwp malcure activate licensekeyhere%Y' ) );
			wp_CLI::log( "\tActivates license key and sets up the install (including registration, definition update)." );
			wp_CLI::log( '' );
			wp_CLI::log( WP_CLI::colorize( '%rwp malcure deactivate%Y' ) );
			wp_CLI::log( "\tDeactivate license key." );
			wp_CLI::log( "\t" );
			wp_CLI::log( WP_CLI::colorize( '%rwp malcure scan%Y' ) );
			wp_CLI::log( "\tInitiate malware scan." );
			wp_CLI::log( "\t" );
			wp_CLI::log( "\tThe following options are supported with scan:" );
			wp_CLI::log( WP_CLI::colorize( "%B\t\t--mcbatchsize=\"10\"" ) );
			wp_CLI::log( WP_CLI::colorize( "%n%w\t\t\tSets number of files to scan per loop / iteration to 10. Default is 50." ) );
			wp_CLI::log( WP_CLI::colorize( "%B\t\t--mcsuspicious=\"false\"" ) );
			wp_CLI::log( WP_CLI::colorize( "%n%w\t\t\tShow suspicious files. Default \"false\"" ) );
			wp_CLI::log( WP_CLI::colorize( "%B\t\t--mcskipdirs=\"wp-admin,wp-includes\"" ) );
			wp_CLI::log( WP_CLI::colorize( "%n%w\t\t\tSkip wp-admin and wp-includes directories. Expects directory name(s); comma-separated." ) );
			wp_CLI::log( WP_CLI::colorize( "%B\t\t--mcdebug=\"true\"" ) );
			wp_CLI::log( WP_CLI::colorize( "%n%w\t\t\tShow debug output." ) );
			wp_CLI::log( WP_CLI::colorize( "%B\t\t--mcregex=\"/find_.*_me/is\"" ) );
			wp_CLI::log( WP_CLI::colorize( "%n%w\t\t\tMatch custom regular expression (in addition to the existing malware definitions)." ) );
			wp_CLI::log( WP_CLI::colorize( "%B\t\t--mcdbquery=\"%script%\" --mcdbregex=\"/href=\/malware/\"" ) );
			wp_CLI::log( WP_CLI::colorize( "%n%w\t\t\tScan database with custom query and regular expression (in addition to the existing malware definitions)." ) );
		}

		function brand_color() {
			return '%B';
		}

		function heading_format() {
			return '%W%9';
		}

		function llog( $str ) {
			print_r( "\n" );
			print_r( $str );
		}

		private function get_severity_format( $status ) {
			$status = strtoupper( $status );
			switch ( $status ) {
				case 'CLEAN':
					return '%g';    // green
				case 'SKIPPED':
					return '%b';    // blue
				case 'SUSPICIOUS':
					return '%y';    // yellow
				case 'HIGH':
					return '%m';    // magenta
				case 'SEVERE':
					return '%r';    // red
				default:
					return '%w';    // grey
			}
		}

		function mc_get_bool( $var ) {
			return filter_var( $var, FILTER_VALIDATE_BOOLEAN );
		}
	}
	WP_CLI::add_command( 'malcure', 'Malcure_Advanced' );
}
